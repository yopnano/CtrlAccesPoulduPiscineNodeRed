[
    {
        "id": "0401eb93d584c99a",
        "type": "tab",
        "label": "Contrôle d'accès",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f99f61d176d88850",
        "type": "tab",
        "label": "Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7fb87140232fe9d",
        "type": "tab",
        "label": "CSV Badges",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "591abc7ecc8a82dd",
        "type": "tab",
        "label": "Communication",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "2bda734229a070eb",
        "type": "tab",
        "label": "Parametres",
        "disabled": false,
        "info": "Gestion des fichier de paramétrage\r\n\r\nCe flux permet de modifier les paramètres avec les formulaires disponible sur l'interface web graphique",
        "env": []
    },
    {
        "id": "03abf3d3ef281a57",
        "type": "group",
        "z": "0401eb93d584c99a",
        "name": "Lecture du badge",
        "style": {
            "fill": "#bfdbef",
            "label": true,
            "stroke": "#000000",
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "db65c9d28895a6c5",
            "599740772563d9fe",
            "92e181a1ce7fe4e8",
            "af6ae15c6f3eed6c",
            "f32ba09408f3c256",
            "e84bd0b3f880aafe"
        ],
        "x": 54,
        "y": 19,
        "w": 852,
        "h": 122
    },
    {
        "id": "6ae47d635703e4eb",
        "type": "group",
        "z": "0401eb93d584c99a",
        "name": "Recherche du badge lu dans le fichier csv (fichier contenant tous les badges)",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#dbcbe7",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "5fe01198061cfc1b",
            "9b3dee8eb70002a2",
            "1b9c9329f5b78ac0",
            "533786b989e49c4b",
            "e468a557ba55eab8",
            "e685f8dc9885ee8b",
            "e47d6d7ececec8b0",
            "a5d6f6074df2ce9b",
            "bb345c14feaa11f3"
        ],
        "x": 54,
        "y": 159,
        "w": 1002,
        "h": 122
    },
    {
        "id": "ab13c8a209213fdb",
        "type": "group",
        "z": "0401eb93d584c99a",
        "name": "Action selon le type de badge",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#ffffbf",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "ecda955ce03fae64",
            "5cc76e319a5ee2b9",
            "c68b5b63817d1772",
            "93647590fdfecef8",
            "e63502d184c8cbf5",
            "b8d398a96cc4d34a",
            "309962c378d3d1c4",
            "50bf8a8f2b0c039c",
            "2cf05a948962d114",
            "329d668a16c6b1e4",
            "f0ce225c397959d5",
            "8e57d5a6527160a6",
            "ac7637cdb85568cd",
            "71e38fc8ce81be16"
        ],
        "x": 54,
        "y": 299,
        "w": 1022,
        "h": 242
    },
    {
        "id": "08523bcc635d9f44",
        "type": "group",
        "z": "f99f61d176d88850",
        "name": "Gestion du point d'accès W-Fi",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "e306ac211462d63b",
            "06009135086b5ea4",
            "01bf14d42e33bb88",
            "cc7f6406773f5abb",
            "149e46a2cb4358e2",
            "3968539fa1701aae",
            "14f8c8471f2fcf03",
            "d8264aa3e617f306",
            "ef75846b774ac1dd",
            "a1dde28a3427a9cc",
            "26eb8b2acbec1356",
            "5fa0b17c9b2bde53",
            "392ed94bab86b646",
            "783525c359edfba6",
            "3c38367fcb324d86",
            "d37db19602b1723c",
            "18a8e13db3b812da",
            "b44de002ef35811b",
            "8150baa479df1502",
            "a028c0b4a886159f",
            "03529e86e0ffdd59",
            "b2517b9c2b89c31b",
            "0fe615746f8fcb91",
            "7b12f19cb42502b9",
            "5169d8c1c23ea18a",
            "905dfca79840796c",
            "60a4e596c3d8dad8",
            "547b97ced74669ee",
            "71778f27525cd34a",
            "bdba2b4f959a87a0",
            "70e930a250435c8a",
            "7120fb30ecfc74af"
        ],
        "x": 24,
        "y": 19,
        "w": 1362,
        "h": 342
    },
    {
        "id": "6236bcedb5ad3ed2",
        "type": "group",
        "z": "0401eb93d584c99a",
        "name": "Déverrouillage du poratil",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "9d7108206de36d72",
            "377f56af49bc3b6c",
            "6be108f6c54f7f4d",
            "959ab5871d0d2368",
            "78854bcb29ee6538",
            "abdc29633cede91b",
            "a570e08cc71571cf"
        ],
        "x": 74,
        "y": 559,
        "w": 992,
        "h": 142
    },
    {
        "id": "5444c772b7bef63c",
        "type": "group",
        "z": "b7fb87140232fe9d",
        "name": "Mise à jour du fichier CSV",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "update-csv",
            "write-updated-csv",
            "delete-from-csv",
            "b4193616c42bd034",
            "c18097db6ea8c49a",
            "cbebc005f2e85a7d",
            "c9a6d29df5ef2a8b",
            "5201f1bc8e4e41e5",
            "48fe8ebc4af5cd6b",
            "e81743050a9f376b",
            "6c65b544c9dba5ad",
            "a306b64fd90323a8",
            "3031944d6dea631e",
            "9926e8fc24a9d1f3"
        ],
        "x": 24,
        "y": 519,
        "w": 942,
        "h": 202
    },
    {
        "id": "6fb40bcfcadc177b",
        "type": "group",
        "z": "b7fb87140232fe9d",
        "name": "Interface de gestion des badges",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "parse-csv",
            "prepare-badge-list",
            "add-badge",
            "ui-table",
            "0713f52a4738adcf",
            "5195e03d72347812",
            "430b8d717d649def",
            "0167bafd27ea1a58",
            "8319687c46b92b91",
            "d70e0a76ad116354",
            "982e71bcc423b51e",
            "73f87137ca42f812",
            "c0ed11991259f947",
            "f8e161c6df3483ee",
            "de1e94ac57e14e9b",
            "5b3a2cbf42ca0f61",
            "89be4880b3ec336f",
            "a8b8abe0dbb89d01",
            "8315cb0b37bf2360",
            "3223507d3cfa6ef0",
            "12daa1d853407168",
            "e4a7312f36a25dd0",
            "ca0494bb7ee27c7b",
            "be51f9118da183d6",
            "1f52d09d7dfc537a",
            "e3c2daa8b6415d3c",
            "a29b7c7115c54d1d",
            "beaa458f9661cf23",
            "af9e52185c4c958b",
            "0dd4a1227a3644e8",
            "01bd06a552790404",
            "428593e904c3f9e3",
            "cdc669b609c0032f",
            "07cbe2e7971d840e"
        ],
        "x": 14,
        "y": 139,
        "w": 1332,
        "h": 362
    },
    {
        "id": "ecc3d44747b5a6e4",
        "type": "group",
        "z": "f99f61d176d88850",
        "name": "Redémarrage du système",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#ffefbf",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "680c5a11adb41484",
            "52060a56fc94b130",
            "0a1b5d6b91c62d0b",
            "42bf7d4dce6fc68b",
            "3e98501042490dc4",
            "eeb2b765754f01b8",
            "653ed643d71f86fe",
            "745cd382c136fa23"
        ],
        "x": 34,
        "y": 759,
        "w": 1072,
        "h": 142
    },
    {
        "id": "2473d132d401207a",
        "type": "group",
        "z": "f99f61d176d88850",
        "name": "Arrêt du système",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#ffbfbf",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "2a321425f18897f0",
            "a52ae96f1a7720a0",
            "00e10551be067ba2",
            "b227e619e3daa05a",
            "89bd908fa4185299",
            "2de3d6d6cea2f8fc",
            "d5a56c3e54241e69",
            "3847267b4923ef9c"
        ],
        "x": 28,
        "y": 919,
        "w": 1078,
        "h": 368
    },
    {
        "id": "5712cf90b1da71a0",
        "type": "group",
        "z": "2bda734229a070eb",
        "name": "1.Remplissage des formulaires de paramétrage",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#ffffbf",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "8c129268cf06fa26",
            "form_piscine",
            "form_ouverture",
            "split_keys",
            "route_keys",
            "918073b321fb1666",
            "d04a035bf1a5d153",
            "5dd6483293b45783",
            "d8c3b3d7be81b28f",
            "0e9d63e074df1cc8"
        ],
        "x": 14,
        "y": 79,
        "w": 1242,
        "h": 162
    },
    {
        "id": "653da2730ee03df8",
        "type": "group",
        "z": "2bda734229a070eb",
        "name": "2.Mise à jour du fichier de paramètres",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "caa64d86486e0c34",
            "582a858c3f44d407",
            "handle_dynamic_form",
            "merge_dynamic_json",
            "3f43fdfde31db126",
            "4294cbb75e704dcd",
            "73de6374571858aa",
            "b0cc9c632e5568e7",
            "ab73f302936e1e51",
            "d01648807342866a",
            "703d03dc2970af4b"
        ],
        "x": 14,
        "y": 279,
        "w": 1412,
        "h": 162
    },
    {
        "id": "5a391963a7287350",
        "type": "group",
        "z": "2bda734229a070eb",
        "name": "Date et Heure système",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "becf941b1a8de637",
            "format-date-time",
            "798f8938cab8d653",
            "3692e410e43961cd",
            "248e24b72cc80b9b",
            "9fb2a73cd4792475",
            "080297b2478bcc19",
            "4b6a23c6150c579a",
            "a6fd6480f60f1efb",
            "b3832d375286d59e",
            "8ad750ef08bb7665",
            "89b65951d548a3f6",
            "fc52c7a5b42d6d93",
            "bc176d9dc4165081",
            "set-system-time",
            "104cbd5487291ad2"
        ],
        "x": 14,
        "y": 679,
        "w": 1212,
        "h": 282
    },
    {
        "id": "75a9a7cf037a474d",
        "type": "group",
        "z": "591abc7ecc8a82dd",
        "name": "Surveillance de la communication",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "78bc32fd489261d1",
            "c9c3485fced0181e",
            "ac8af869b3242cbd",
            "b6730c9cd280693e",
            "1b3a505c1fb09b5a",
            "c2a5d3ed4375ca2e",
            "960329839e07f6fd",
            "41517a322d9eb80e",
            "85b7f075344482af",
            "af2ce02634a47f83",
            "413eeeea223db926",
            "3487b4a67424ab63",
            "7e39c6db9fc3e5d7",
            "70e975d29c6d573f",
            "422152293a8cc4ae",
            "4ae815b9e2048893",
            "7dd13654c169f94c",
            "96e1a885a08e2b85",
            "a48aabe134c6753a",
            "8b66295461714e80",
            "0d1b2a142d8a2c92",
            "456387f7ddb14772"
        ],
        "x": 14,
        "y": 19,
        "w": 1212,
        "h": 342
    },
    {
        "id": "8da2d3af0c18bd9f",
        "type": "group",
        "z": "2bda734229a070eb",
        "name": "3.Mise à jour des paramètres dans l'arduino",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#dbcbe7",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "51a010616a1a2b65",
            "adbad85229010494",
            "c1ab756bcd256b8f",
            "413b7f85a50b09f0",
            "9b2bda38afb34204",
            "52aea6fbe6cdc28b",
            "9b3028a96953aa74",
            "22a4d126a7b3577a"
        ],
        "x": 14,
        "y": 479,
        "w": 952,
        "h": 162
    },
    {
        "id": "0011e81b7c31bd01",
        "type": "group",
        "z": "0401eb93d584c99a",
        "name": "Pilotage du buzzer",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "b12f129bdae72d5f",
            "3a3ec17fe7f6a1aa",
            "a03c13440fecb56e",
            "59fbb270a12c7e8f",
            "1008f636f4a91260",
            "5df89e9f24a4d0a7",
            "829a7bf0d0c0c05e"
        ],
        "x": 64,
        "y": 739,
        "w": 982,
        "h": 202
    },
    {
        "id": "55bdfefc3ec401d1",
        "type": "group",
        "z": "f99f61d176d88850",
        "name": "Gestion de l'overlay FS",
        "style": {
            "stroke": "#3f3f3f",
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "20dbb0dca0f7b992",
            "77a92e80ac3347cf",
            "2acc780f667d9935",
            "b4a6f608a2d5c216",
            "9e807d893b733054",
            "3a722ea287d68fcf",
            "68ac9b39f7b05adc",
            "0f251e54d533b756",
            "6bd3a8347ef136ce",
            "dcffbb1111cf47d3",
            "ee2b8e4d0f09d144",
            "69617daa390db277",
            "5e1c90ee08ed828a",
            "f99f65ecd51b0674",
            "f7798d34c5497d69",
            "dc33e0934e4fcc37",
            "851225d6382973bc",
            "a0cd10cfc650656e",
            "1a21dab6bededd94",
            "50707c177d932162",
            "9378fba89f3bbbe7",
            "473cf66c4f3ba1ec",
            "b18be167e2df3715",
            "0f81b8053dae08d2",
            "bc5a4ea7360d3fb0",
            "1935b7ba37d53883",
            "28d2f5fee338284f"
        ],
        "x": 24,
        "y": 399,
        "w": 1302,
        "h": 322
    },
    {
        "id": "3847267b4923ef9c",
        "type": "group",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "name": "Arrêt automatique (sur coupure de courant)",
        "style": {
            "stroke": "none",
            "stroke-opacity": "0.2",
            "fill": "#ffffff",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a5007556f23ea3ef",
            "0b3133aedd88273e",
            "b66c6ab9aeba59b9",
            "9433913b02703e35",
            "ae31fec40099e219",
            "fb07dd801a0da2cd",
            "8b6c2fc8a4cf2d75",
            "79a903e8d5e1195e",
            "cbd62722f0d838dc",
            "ac94056f1d5b909d",
            "a5218aea095da7bc",
            "b7049679b6722877"
        ],
        "x": 54,
        "y": 1059,
        "w": 992,
        "h": 202
    },
    {
        "id": "a14588abf773c2cf",
        "type": "ui_tab",
        "name": "Accueil",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a63c80323ee93ce4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Contrôle d'accès piscine - Interface de gestion",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "51aac18895484626",
        "type": "ui_tab",
        "name": "Paramètres",
        "icon": "settings",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2fc761fc214b7ca9",
        "type": "ui_group",
        "name": "Date et heure",
        "tab": "51aac18895484626",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "de61be64d46e4941",
        "type": "ui_group",
        "name": "Date et heure",
        "tab": "a14588abf773c2cf",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8d754f839da525fc",
        "type": "ui_group",
        "name": "Accès piscine",
        "tab": "51aac18895484626",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0774bc01ee11c4d3",
        "type": "ui_tab",
        "name": "Badges",
        "icon": "person",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "59fa5f21b1f59787",
        "type": "ui_group",
        "name": "Liste badges",
        "tab": "0774bc01ee11c4d3",
        "order": 2,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "631cc1e4eb5c5735",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "df78866d954116a4",
        "type": "ui_spacer",
        "z": "2bda734229a070eb",
        "name": "spacer",
        "group": "8d754f839da525fc",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "39dd9e70963c8db5",
        "type": "ui_group",
        "name": "Wi-Fi",
        "tab": "a14588abf773c2cf",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2af2e23a3cac9b4d",
        "type": "ui_group",
        "name": "Contrôle / Commandes",
        "tab": "a14588abf773c2cf",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fb8ef8df1ea1ad74",
        "type": "ui_group",
        "name": "Gestion badges",
        "tab": "0774bc01ee11c4d3",
        "order": 3,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "db65c9d28895a6c5",
        "type": "moment",
        "z": "0401eb93d584c99a",
        "g": "03abf3d3ef281a57",
        "name": "Format Date",
        "topic": "",
        "input": "payload.timestamp",
        "inputType": "msg",
        "inTz": "Europe/Paris",
        "adjAmount": "1",
        "adjType": "months",
        "adjDir": "add",
        "format": "object",
        "locale": "fr-FR",
        "output": "payload.datetime",
        "outputType": "msg",
        "outTz": "Europe/Paris",
        "x": 510,
        "y": 80,
        "wires": [
            [
                "af6ae15c6f3eed6c"
            ]
        ]
    },
    {
        "id": "f32ba09408f3c256",
        "type": "debug",
        "z": "0401eb93d584c99a",
        "g": "03abf3d3ef281a57",
        "name": "RFID",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 60,
        "wires": []
    },
    {
        "id": "599740772563d9fe",
        "type": "function",
        "z": "0401eb93d584c99a",
        "g": "03abf3d3ef281a57",
        "name": "Format HEX",
        "func": "msg.payload = {\n    uid: String(msg.payload.code),\n    timestamp: Date.now()\n};\n\n// Retourner le message transformé\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            [
                "db65c9d28895a6c5"
            ]
        ],
        "info": "Formatage de l'UID reçu sous forme décimale en chaine \r\nde caractère représentant la valeur en hexadécimal\r\n\r\nL'ordre des octets est inversée pour correpondre\r\nà la valeur inscrite sur le badge"
    },
    {
        "id": "92e181a1ce7fe4e8",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "03abf3d3ef281a57",
        "name": "Badge_Lu",
        "mode": "link",
        "links": [
            "5fe01198061cfc1b",
            "af9e52185c4c958b"
        ],
        "x": 775,
        "y": 100,
        "wires": []
    },
    {
        "id": "5fe01198061cfc1b",
        "type": "link in",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Recherche",
        "links": [
            "92e181a1ce7fe4e8"
        ],
        "x": 95,
        "y": 220,
        "wires": [
            [
                "e685f8dc9885ee8b"
            ]
        ]
    },
    {
        "id": "9b3dee8eb70002a2",
        "type": "csv",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "1b9c9329f5b78ac0"
            ]
        ]
    },
    {
        "id": "af6ae15c6f3eed6c",
        "type": "change",
        "z": "0401eb93d584c99a",
        "g": "03abf3d3ef281a57",
        "name": "Memo",
        "rules": [
            {
                "t": "set",
                "p": "scannedTag",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 80,
        "wires": [
            [
                "f32ba09408f3c256",
                "92e181a1ce7fe4e8"
            ]
        ]
    },
    {
        "id": "1b9c9329f5b78ac0",
        "type": "function",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Recherche",
        "func": "let scannedUID = flow.get(\"scannedTag.uid\");\n\n// Table des badges provenant du CSV\nlet badges = msg.payload;\n\n// Rechercher le badge correspondant à l'UID scanné\nlet foundBadge = badges.find(badge => badge.UID == scannedUID);\n\nif (foundBadge) {\n    // Badge trouvé, renvoyer les informations\n    msg.payload = {\n        success: true,\n        message: \"Badge trouvé\",\n        badge: foundBadge\n    };\n} else {\n    // Badge non trouvé\n    msg.payload = {\n        success: false,\n        UID: scannedUID,\n        message: \"Badge non trouvé\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 220,
        "wires": [
            [
                "e468a557ba55eab8"
            ]
        ]
    },
    {
        "id": "533786b989e49c4b",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Badge_Reconnu",
        "mode": "link",
        "links": [
            "ecda955ce03fae64"
        ],
        "x": 1015,
        "y": 200,
        "wires": []
    },
    {
        "id": "9d7108206de36d72",
        "type": "inject",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "6be108f6c54f7f4d"
            ]
        ]
    },
    {
        "id": "377f56af49bc3b6c",
        "type": "link in",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Deverrouillage_Portail",
        "links": [
            "329d668a16c6b1e4",
            "93647590fdfecef8"
        ],
        "x": 135,
        "y": 620,
        "wires": [
            [
                "6be108f6c54f7f4d"
            ]
        ]
    },
    {
        "id": "e468a557ba55eab8",
        "type": "switch",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Resultat",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 220,
        "wires": [
            [
                "e47d6d7ececec8b0"
            ],
            [
                "bb345c14feaa11f3"
            ]
        ]
    },
    {
        "id": "6be108f6c54f7f4d",
        "type": "ui_button",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Ouverture",
        "group": "2af2e23a3cac9b4d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Ouverture portail",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "abdc29633cede91b"
            ]
        ]
    },
    {
        "id": "ecda955ce03fae64",
        "type": "link in",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Gestion_Acces",
        "links": [
            "533786b989e49c4b"
        ],
        "x": 95,
        "y": 400,
        "wires": [
            [
                "5cc76e319a5ee2b9",
                "c68b5b63817d1772"
            ]
        ]
    },
    {
        "id": "5cc76e319a5ee2b9",
        "type": "debug",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Info badge",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 340,
        "wires": []
    },
    {
        "id": "c68b5b63817d1772",
        "type": "switch",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Groupe",
        "property": "payload.badge.Group",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "999",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 220,
        "y": 460,
        "wires": [
            [
                "b8d398a96cc4d34a"
            ],
            [
                "93647590fdfecef8"
            ],
            [
                "e63502d184c8cbf5"
            ]
        ]
    },
    {
        "id": "93647590fdfecef8",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Badge_permanent",
        "mode": "link",
        "links": [
            "377f56af49bc3b6c"
        ],
        "x": 355,
        "y": 460,
        "wires": []
    },
    {
        "id": "e63502d184c8cbf5",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Badge_configuration",
        "mode": "link",
        "links": [
            "14f8c8471f2fcf03"
        ],
        "x": 355,
        "y": 500,
        "wires": []
    },
    {
        "id": "b8d398a96cc4d34a",
        "type": "file in",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Paramètres.json",
        "filename": "/home/pi/Documents/ControleAcces/Parametres.json",
        "filenameType": "str",
        "format": "utf8",
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "309962c378d3d1c4"
            ]
        ]
    },
    {
        "id": "309962c378d3d1c4",
        "type": "json",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Parse Config",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 400,
        "wires": [
            [
                "50bf8a8f2b0c039c"
            ]
        ]
    },
    {
        "id": "50bf8a8f2b0c039c",
        "type": "function",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Accès d'été",
        "func": "let config = msg.payload.acces_piscine;\n\nlet now = new Date();\nlet currentMonth = now.getMonth() + 1;  // getMonth is 0-indexed\nlet currentDay = now.getDate();\nlet currentHour = now.getHours();\nlet currentMinute = now.getMinutes();\n\n// Parse la période de début et de fin d'acces\nlet [startDay, startMonth] = config.date_debut.split('/').map(Number);\nlet [endDay, endMonth] = config.date_fin.split('/').map(Number);\nlet [startHour, startMinute] = config.heure_debut.split(':').map(Number);\nlet [endHour, endMinute] = config.heure_fin.split(':').map(Number);\n\n// Check if current date is within the summer period\nlet withinDateRange = (currentMonth > startMonth || (currentMonth === startMonth && currentDay >= startDay)) &&\n                      (currentMonth < endMonth || (currentMonth === endMonth && currentDay <= endDay));\n\n// Check if current time is within the allowed time range\nlet withinTimeRange = (currentHour > startHour || (currentHour === startHour && currentMinute >= startMinute)) &&\n                      (currentHour < endHour || (currentHour === endHour && currentMinute <= endMinute));\n\nmsg.payload = {};\n\nif (withinDateRange && withinTimeRange) {\n    msg.payload.access = true;\n    msg.payload.info = \"Accès Autorisé\";\n} else {\n    msg.payload.access = false;\n    msg.payload.info = \"Accès refusé\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 400,
        "wires": [
            [
                "2cf05a948962d114"
            ]
        ]
    },
    {
        "id": "2cf05a948962d114",
        "type": "switch",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Autorisation",
        "property": "payload.access",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 400,
        "wires": [
            [
                "329d668a16c6b1e4"
            ],
            [
                "71e38fc8ce81be16"
            ]
        ]
    },
    {
        "id": "329d668a16c6b1e4",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Badge_simple_autorisé",
        "mode": "link",
        "links": [
            "377f56af49bc3b6c"
        ],
        "x": 1035,
        "y": 380,
        "wires": []
    },
    {
        "id": "f0ce225c397959d5",
        "type": "comment",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Contrôle date et heure pour les badges simple",
        "info": "",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "8e57d5a6527160a6",
        "type": "comment",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Ouverture badge rouge",
        "info": "",
        "x": 480,
        "y": 460,
        "wires": []
    },
    {
        "id": "ac7637cdb85568cd",
        "type": "comment",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Activation WiFi badge configuration",
        "info": "",
        "x": 520,
        "y": 500,
        "wires": []
    },
    {
        "id": "e685f8dc9885ee8b",
        "type": "link call",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "",
        "links": [
            "d2ce0b8ca3f408a5"
        ],
        "linkType": "static",
        "timeout": "1",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "9b3dee8eb70002a2"
            ]
        ]
    },
    {
        "id": "e47d6d7ececec8b0",
        "type": "switch",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Badge actif",
        "property": "payload.badge.Active",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 200,
        "wires": [
            [
                "533786b989e49c4b"
            ],
            [
                "a5d6f6074df2ce9b"
            ]
        ]
    },
    {
        "id": "e84bd0b3f880aafe",
        "type": "mqtt in",
        "z": "0401eb93d584c99a",
        "g": "03abf3d3ef281a57",
        "name": "Badge / Code",
        "topic": "CtrlAccess/state/Wiegand",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "631cc1e4eb5c5735",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 80,
        "wires": [
            [
                "599740772563d9fe"
            ]
        ]
    },
    {
        "id": "959ab5871d0d2368",
        "type": "mqtt out",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Déverouillage",
        "topic": "CtrlAccess/Deverrouillage",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "631cc1e4eb5c5735",
        "x": 920,
        "y": 640,
        "wires": []
    },
    {
        "id": "b12f129bdae72d5f",
        "type": "change",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "ON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "59fbb270a12c7e8f"
            ]
        ]
    },
    {
        "id": "3a3ec17fe7f6a1aa",
        "type": "delay",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 900,
        "wires": [
            [
                "a03c13440fecb56e"
            ]
        ]
    },
    {
        "id": "a03c13440fecb56e",
        "type": "change",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "Off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 880,
        "wires": [
            [
                "59fbb270a12c7e8f"
            ]
        ]
    },
    {
        "id": "59fbb270a12c7e8f",
        "type": "mqtt out",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "",
        "topic": "CtrlAccess/Buzzer",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "631cc1e4eb5c5735",
        "x": 930,
        "y": 840,
        "wires": []
    },
    {
        "id": "1008f636f4a91260",
        "type": "delay",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "",
        "pauseType": "delay",
        "timeout": "150",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 860,
        "wires": [
            [
                "a03c13440fecb56e"
            ]
        ]
    },
    {
        "id": "78854bcb29ee6538",
        "type": "template",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Temps d'ouverture",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.temps_ouverture.entree}}",
        "output": "str",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "a570e08cc71571cf",
                "959ab5871d0d2368"
            ]
        ]
    },
    {
        "id": "abdc29633cede91b",
        "type": "link call",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Paramètres",
        "links": [
            "0124b39cabcd3cd4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 620,
        "wires": [
            [
                "78854bcb29ee6538"
            ]
        ]
    },
    {
        "id": "a570e08cc71571cf",
        "type": "debug",
        "z": "0401eb93d584c99a",
        "g": "6236bcedb5ad3ed2",
        "name": "Temps d'ouverture",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 600,
        "wires": []
    },
    {
        "id": "5df89e9f24a4d0a7",
        "type": "link in",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "Short_Beep",
        "links": [
            "71e38fc8ce81be16"
        ],
        "x": 105,
        "y": 780,
        "wires": [
            [
                "b12f129bdae72d5f",
                "1008f636f4a91260"
            ]
        ]
    },
    {
        "id": "829a7bf0d0c0c05e",
        "type": "link in",
        "z": "0401eb93d584c99a",
        "g": "0011e81b7c31bd01",
        "name": "Medium_Beep",
        "links": [
            "a5d6f6074df2ce9b",
            "bb345c14feaa11f3"
        ],
        "x": 105,
        "y": 820,
        "wires": [
            [
                "b12f129bdae72d5f",
                "3a3ec17fe7f6a1aa"
            ]
        ]
    },
    {
        "id": "71e38fc8ce81be16",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "ab13c8a209213fdb",
        "name": "Badge_simple_pas_autorisé",
        "mode": "link",
        "links": [
            "5df89e9f24a4d0a7"
        ],
        "x": 1035,
        "y": 420,
        "wires": []
    },
    {
        "id": "a5d6f6074df2ce9b",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Badge_Lu_Désactivé",
        "mode": "link",
        "links": [
            "829a7bf0d0c0c05e"
        ],
        "x": 1015,
        "y": 240,
        "wires": []
    },
    {
        "id": "bb345c14feaa11f3",
        "type": "link out",
        "z": "0401eb93d584c99a",
        "g": "6ae47d635703e4eb",
        "name": "Badge_Lu_Introuvable",
        "mode": "link",
        "links": [
            "829a7bf0d0c0c05e"
        ],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "e306ac211462d63b",
        "type": "inject",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Activer AP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 60,
        "wires": [
            [
                "01bf14d42e33bb88"
            ]
        ]
    },
    {
        "id": "06009135086b5ea4",
        "type": "inject",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Désactiver AP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "cc7f6406773f5abb"
            ]
        ]
    },
    {
        "id": "01bf14d42e33bb88",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "command": "sudo nmcli c up bridge0-wlan0",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Activer Wi-Fi",
        "x": 970,
        "y": 100,
        "wires": [
            [
                "60a4e596c3d8dad8"
            ],
            [],
            []
        ]
    },
    {
        "id": "cc7f6406773f5abb",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "command": "sudo nmcli c down bridge0-wlan0",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Désactiver Wi-Fi",
        "x": 980,
        "y": 240,
        "wires": [
            [
                "547b97ced74669ee"
            ],
            [],
            []
        ]
    },
    {
        "id": "3c38367fcb324d86",
        "type": "debug",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 320,
        "wires": []
    },
    {
        "id": "149e46a2cb4358e2",
        "type": "ui_button",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Désactiver AP",
        "group": "39dd9e70963c8db5",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Désactiver WiFi",
        "tooltip": "",
        "color": "Black",
        "bgcolor": "Orange",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 760,
        "y": 240,
        "wires": [
            [
                "cc7f6406773f5abb"
            ]
        ]
    },
    {
        "id": "3968539fa1701aae",
        "type": "ui_button",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Activer AP",
        "group": "39dd9e70963c8db5",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Activer WiFi",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "7b12f19cb42502b9"
            ]
        ]
    },
    {
        "id": "14f8c8471f2fcf03",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Activer_AP_WiFi",
        "links": [
            "e63502d184c8cbf5"
        ],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "03529e86e0ffdd59"
            ]
        ]
    },
    {
        "id": "d8264aa3e617f306",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "command": "sudo nmcli -t -f NAME,STATE con show --active | grep bridge0-wlan0",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Etat du Wi-Fi",
        "x": 390,
        "y": 100,
        "wires": [
            [
                "a028c0b4a886159f"
            ],
            [],
            []
        ]
    },
    {
        "id": "ef75846b774ac1dd",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Inverser",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "01bf14d42e33bb88"
            ],
            [
                "cc7f6406773f5abb"
            ]
        ]
    },
    {
        "id": "a1dde28a3427a9cc",
        "type": "mqtt out",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "",
        "topic": "CtrlAccess/Led",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "631cc1e4eb5c5735",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "26eb8b2acbec1356",
        "type": "link out",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Changement_AP_WiFi",
        "mode": "link",
        "links": [
            "5fa0b17c9b2bde53"
        ],
        "x": 1345,
        "y": 260,
        "wires": []
    },
    {
        "id": "5fa0b17c9b2bde53",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Etat_AP_WiFi",
        "links": [
            "26eb8b2acbec1356"
        ],
        "x": 65,
        "y": 280,
        "wires": [
            [
                "783525c359edfba6",
                "3c38367fcb324d86",
                "8150baa479df1502"
            ]
        ]
    },
    {
        "id": "392ed94bab86b646",
        "type": "inject",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "ft1m",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "d8264aa3e617f306"
            ]
        ]
    },
    {
        "id": "680c5a11adb41484",
        "type": "ui_button",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "name": "",
        "group": "2af2e23a3cac9b4d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Redémarrer",
        "tooltip": "",
        "color": "BLACK",
        "bgcolor": "ORANGE",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "0a1b5d6b91c62d0b"
            ]
        ]
    },
    {
        "id": "52060a56fc94b130",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "command": "sudo reboot now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 840,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2a321425f18897f0",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 980,
        "y": 1020,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "783525c359edfba6",
        "type": "delay",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "2 sec",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 240,
        "wires": [
            [
                "d8264aa3e617f306"
            ]
        ]
    },
    {
        "id": "d37db19602b1723c",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "activation",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bascule",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 120,
        "wires": [
            [
                "5169d8c1c23ea18a"
            ],
            [
                "ef75846b774ac1dd"
            ]
        ]
    },
    {
        "id": "b44de002ef35811b",
        "type": "function",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Gestion tempo",
        "func": "let tempo = flow.get(\"TempoWlan\");\nlet defCom = global.get(\"DefCom\");\n\nif (tempo > 0 && defCom === false)\n{\n    tempo = tempo - 1;\n    flow.set(\"TempoWlan\", tempo);\n}\nmsg.payload = tempo;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "b2517b9c2b89c31b",
                "0fe615746f8fcb91"
            ]
        ]
    },
    {
        "id": "8150baa479df1502",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "RAZ Tempo",
        "rules": [
            {
                "t": "set",
                "p": "TempoWlan",
                "pt": "flow",
                "to": "1800",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "18a8e13db3b812da",
        "type": "inject",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "ft1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 410,
        "y": 280,
        "wires": [
            [
                "b44de002ef35811b"
            ]
        ]
    },
    {
        "id": "a028c0b4a886159f",
        "type": "function",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Booleen",
        "func": "let payload = msg.payload;\n\n// Si message non vide on envoie 1 sinon 0\nmsg.payload = (payload) ? '1' : '0';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "a1dde28a3427a9cc",
                "d37db19602b1723c"
            ]
        ]
    },
    {
        "id": "03529e86e0ffdd59",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Bascule",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "bascule",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 60,
        "wires": [
            [
                "d8264aa3e617f306"
            ]
        ]
    },
    {
        "id": "b2517b9c2b89c31b",
        "type": "switch",
        "z": "f99f61d176d88850",
        "d": true,
        "g": "08523bcc635d9f44",
        "name": "Temps écoulé",
        "property": "TempoWlan",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 760,
        "y": 280,
        "wires": [
            [
                "cc7f6406773f5abb"
            ]
        ]
    },
    {
        "id": "0fe615746f8fcb91",
        "type": "ui_gauge",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Durée Wi-Fi",
        "group": "39dd9e70963c8db5",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Temps restant Wi-Fi",
        "label": "secondes",
        "format": "{{value}}",
        "min": "0",
        "max": "1800",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "7b12f19cb42502b9",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Activation",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "activation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 180,
        "wires": [
            [
                "d8264aa3e617f306"
            ]
        ]
    },
    {
        "id": "5169d8c1c23ea18a",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Activer",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 100,
        "wires": [
            [
                "01bf14d42e33bb88"
            ],
            [
                "71778f27525cd34a"
            ]
        ]
    },
    {
        "id": "905dfca79840796c",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "position": "top right",
        "displayTime": "2",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1230,
        "y": 220,
        "wires": []
    },
    {
        "id": "60a4e596c3d8dad8",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Wi-Fi activé",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "905dfca79840796c",
                "71778f27525cd34a"
            ]
        ]
    },
    {
        "id": "547b97ced74669ee",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Wi-Fi désactivé",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "905dfca79840796c",
                "71778f27525cd34a"
            ]
        ]
    },
    {
        "id": "71778f27525cd34a",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "RAZ Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "26eb8b2acbec1356"
            ]
        ]
    },
    {
        "id": "bdba2b4f959a87a0",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Activer_WiFi",
        "links": [
            "70e975d29c6d573f"
        ],
        "x": 65,
        "y": 200,
        "wires": [
            [
                "70e930a250435c8a"
            ]
        ]
    },
    {
        "id": "70e930a250435c8a",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "DefCom",
        "property": "DefCom",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "7b12f19cb42502b9"
            ]
        ]
    },
    {
        "id": "a52ae96f1a7720a0",
        "type": "ui_button",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "name": "",
        "group": "2af2e23a3cac9b4d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Arrêter",
        "tooltip": "",
        "color": "WHITE",
        "bgcolor": "RED",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "b227e619e3daa05a"
            ]
        ]
    },
    {
        "id": "00e10551be067ba2",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Oui",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Confirmation",
        "x": 470,
        "y": 960,
        "wires": [
            [
                "d5a56c3e54241e69"
            ]
        ]
    },
    {
        "id": "b227e619e3daa05a",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Arrêt du système",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Êtes-vous sûr de vouloir arrêter l'installation ? Le système pourra être mis hors tension en toute sécurité",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 960,
        "wires": [
            [
                "00e10551be067ba2"
            ]
        ]
    },
    {
        "id": "89bd908fa4185299",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "position": "top right",
        "displayTime": "30",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1010,
        "y": 960,
        "wires": []
    },
    {
        "id": "2de3d6d6cea2f8fc",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Arrêt du système",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Arrêt du système en cours, rétablir le courant pour le démarrer",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 960,
        "wires": [
            [
                "89bd908fa4185299"
            ]
        ]
    },
    {
        "id": "0a1b5d6b91c62d0b",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Redémarrage du système",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Voulez-vous redémarrer l'installation ? Le système sera indisponible pendant 5 minutes",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 820,
        "wires": [
            [
                "42bf7d4dce6fc68b"
            ]
        ]
    },
    {
        "id": "42bf7d4dce6fc68b",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Oui",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Confirmation",
        "x": 470,
        "y": 820,
        "wires": [
            [
                "653ed643d71f86fe"
            ]
        ]
    },
    {
        "id": "3e98501042490dc4",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "position": "top right",
        "displayTime": "30",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1010,
        "y": 800,
        "wires": []
    },
    {
        "id": "eeb2b765754f01b8",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Arrêt du système",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Redémarrage du système en cours, le système sera temporairement indisponible et vous allez être déconnecté",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 800,
        "wires": [
            [
                "3e98501042490dc4"
            ]
        ]
    },
    {
        "id": "653ed643d71f86fe",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "name": "Choix",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Oui",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 820,
        "wires": [
            [
                "eeb2b765754f01b8",
                "52060a56fc94b130"
            ],
            []
        ]
    },
    {
        "id": "d5a56c3e54241e69",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "2473d132d401207a",
        "name": "Choix",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Oui",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 960,
        "wires": [
            [
                "2de3d6d6cea2f8fc",
                "2a321425f18897f0"
            ],
            []
        ]
    },
    {
        "id": "7120fb30ecfc74af",
        "type": "comment",
        "z": "f99f61d176d88850",
        "g": "08523bcc635d9f44",
        "name": "Aide",
        "info": "# Gestion du Wi-Fi : Points d'entrée et comportements\n\n## Points d'entrée\n1. **Bascule du Wi-Fi**  \n   - Activation ou désactivation via la saisie d’un code ou l’utilisation d’un badge d’administration.\n   \n2. **Lecture de l’état Wi-Fi**  \n   - **Périodique** : Toutes les minutes, pour actualiser l’état du voyant (vert/rouge).  \n   - **Événementielle** : Sur détection d’un changement d’état du Wi-Fi, pour une mise à jour immédiate du voyant.\n\n3. **Activation automatique**  \n   - Déclenchée en cas de défaut de communication MQTT.  \n   - Possible via une commande depuis l’interface web.\n\n---\n\n## Vérification de l’état Wi-Fi\n- Une commande shell est exécutée pour obtenir l’état actuel du point d’accès Wi-Fi.  \n- L’état est converti en une valeur booléenne (`vrai/faux`) et utilisé pour mettre à jour la couleur du voyant lumineux.\n\n---\n\n## Gestion des commandes reçues\nLorsque le topic contient les mots-clés **_bascule_** ou **_activation_**, les actions suivantes sont effectuées :  \n\n### 1. Commande : Activation\n- Si le Wi-Fi est **désactivé** :  \n  1. Activation via une commande shell.  \n  2. Initialisation d’une temporisation d’extinction.  \n- Si le Wi-Fi est **déjà activé** :  \n  1. Réinitialisation de la temporisation d’extinction.  \n- En cas de défaut de communication MQTT :  \n  1. La temporisation d’extinction est mise en pause pour maintenir le Wi-Fi activé.\n\n### 2. Commande : Bascule\n- Si le Wi-Fi est **désactivé** :  \n  1. Activation via une commande shell.  \n  2. Initialisation d’une temporisation d’extinction.  \n- Si le Wi-Fi est **déjà activé** :  \n  1. Désactivation via une commande shell.\n\n---\n\n## Temporisation d’extinction\n- Lorsque la temporisation d’extinction atteint **zéro**, le Wi-Fi est automatiquement désactivé.  \n- Objectif : Garantir une désactivation du Wi-Fi en cas d’oubli ou d’inactivité prolongée.\n\n### Raison d’être de cette mesure\n1. **Consommation d’énergie** :  \n   Le Wi-Fi augmente la consommation énergétique de la carte, il est donc préférable de le désactiver lorsqu’il n’est pas nécessaire.\n\n2. **Sécurité** :  \n   Maintenir le Wi-Fi désactivé réduit les risques de vulnérabilités ou d'accès non autorisés.\n",
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "a5007556f23ea3ef",
        "type": "rpi-gpio in",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Alimentation Etat",
        "pin": "14",
        "intype": "up",
        "debounce": "200",
        "read": true,
        "bcm": true,
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "ae31fec40099e219"
            ]
        ]
    },
    {
        "id": "0b3133aedd88273e",
        "type": "debug",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1160,
        "wires": []
    },
    {
        "id": "b66c6ab9aeba59b9",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Alimentation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Défaut d'alimentation, fonctionnement sur batterie",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1220,
        "wires": [
            [
                "9433913b02703e35",
                "0b3133aedd88273e"
            ]
        ]
    },
    {
        "id": "9433913b02703e35",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "RED",
        "sendall": true,
        "outputs": 0,
        "ok": "Oui",
        "cancel": "Annuler",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Avertissement",
        "x": 920,
        "y": 1160,
        "wires": []
    },
    {
        "id": "ae31fec40099e219",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Booléen",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "DefAlim",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1200,
        "wires": [
            [
                "fb07dd801a0da2cd"
            ]
        ]
    },
    {
        "id": "fb07dd801a0da2cd",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Choix",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1200,
        "wires": [
            [
                "8b6c2fc8a4cf2d75",
                "a5218aea095da7bc"
            ],
            [
                "b66c6ab9aeba59b9"
            ]
        ]
    },
    {
        "id": "8b6c2fc8a4cf2d75",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Alimentation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Système correctement alimenté",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1180,
        "wires": [
            [
                "9433913b02703e35",
                "0b3133aedd88273e"
            ]
        ]
    },
    {
        "id": "79a903e8d5e1195e",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Alimentation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Problème alimentation, arrêt immédiat",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1100,
        "wires": [
            [
                "9433913b02703e35",
                "0b3133aedd88273e"
            ]
        ]
    },
    {
        "id": "cbd62722f0d838dc",
        "type": "inject",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "ft1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "ac94056f1d5b909d"
            ]
        ]
    },
    {
        "id": "ac94056f1d5b909d",
        "type": "function",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Gestion tempo",
        "func": "let tempo = flow.get(\"TempoAlim\");\nlet defAlim = flow.get(\"DefAlim\");\n\nif (tempo > 0 && defAlim === true)\n{\n    tempo = tempo - 1;\n    flow.set(\"TempoAlim\", tempo);\n}\nmsg.payload = tempo;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "b7049679b6722877"
            ]
        ]
    },
    {
        "id": "a5218aea095da7bc",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "RAZ Tempo",
        "rules": [
            {
                "t": "set",
                "p": "TempoAlim",
                "pt": "flow",
                "to": "60",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "b7049679b6722877",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "3847267b4923ef9c",
        "name": "Temps écoulé",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "79a903e8d5e1195e",
                "a5218aea095da7bc",
                "2a321425f18897f0"
            ]
        ]
    },
    {
        "id": "20dbb0dca0f7b992",
        "type": "ui_switch",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "",
        "label": "Overlay FS",
        "tooltip": "",
        "group": "2af2e23a3cac9b4d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "6bd3a8347ef136ce"
            ]
        ]
    },
    {
        "id": "77a92e80ac3347cf",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "command": "sudo raspi-config nonint get_overlay_conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Conf overlay",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "0f251e54d533b756"
            ],
            [],
            []
        ]
    },
    {
        "id": "2acc780f667d9935",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "command": "sudo raspi-config nonint enable_overlayfs",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Enable overlay",
        "x": 960,
        "y": 460,
        "wires": [
            [
                "851225d6382973bc"
            ],
            [],
            []
        ]
    },
    {
        "id": "b4a6f608a2d5c216",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "command": "sudo raspi-config nonint disable_overlayfs",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Disable overlay",
        "x": 960,
        "y": 520,
        "wires": [
            [
                "851225d6382973bc"
            ],
            [],
            []
        ]
    },
    {
        "id": "9e807d893b733054",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Etat_OverlayFS_In",
        "links": [],
        "x": 65,
        "y": 440,
        "wires": [
            [
                "68ac9b39f7b05adc"
            ]
        ]
    },
    {
        "id": "3a722ea287d68fcf",
        "type": "link out",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Etat_OverlayFS_Out",
        "mode": "return",
        "links": [],
        "x": 285,
        "y": 440,
        "wires": []
    },
    {
        "id": "68ac9b39f7b05adc",
        "type": "function",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Booleen",
        "func": "let payload = msg.payload.trim();\n\n// Si message non vide on envoie 1 sinon 0\nmsg.payload = (payload == '0') ? true : false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 440,
        "wires": [
            [
                "3a722ea287d68fcf"
            ]
        ]
    },
    {
        "id": "0f251e54d533b756",
        "type": "link call",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Etat Bool",
        "links": [
            "9e807d893b733054"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "5e1c90ee08ed828a",
                "20dbb0dca0f7b992"
            ]
        ]
    },
    {
        "id": "6bd3a8347ef136ce",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Application",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 500,
        "wires": [
            [
                "2acc780f667d9935"
            ],
            [
                "b4a6f608a2d5c216"
            ]
        ]
    },
    {
        "id": "dcffbb1111cf47d3",
        "type": "exec",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "command": "sudo raspi-config nonint get_overlay_now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Etat overlay",
        "x": 190,
        "y": 540,
        "wires": [
            [
                "ee2b8e4d0f09d144"
            ],
            [],
            []
        ]
    },
    {
        "id": "ee2b8e4d0f09d144",
        "type": "link call",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Etat Bool",
        "links": [
            "9e807d893b733054"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "473cf66c4f3ba1ec"
            ]
        ]
    },
    {
        "id": "69617daa390db277",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Compare",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Overlay_Conf",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "Overlay_Conf",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 600,
        "wires": [
            [
                "a0cd10cfc650656e"
            ],
            []
        ]
    },
    {
        "id": "5e1c90ee08ed828a",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Memo_conf",
        "rules": [
            {
                "t": "set",
                "p": "Overlay_Conf",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 460,
        "wires": [
            [
                "dc33e0934e4fcc37"
            ]
        ]
    },
    {
        "id": "f99f65ecd51b0674",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Vous devez redémarrer l'installation pour appliquer les changements.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 660,
        "wires": [
            [
                "50707c177d932162"
            ]
        ]
    },
    {
        "id": "f7798d34c5497d69",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Maj_Conf_Overlay_In",
        "links": [],
        "x": 65,
        "y": 480,
        "wires": [
            [
                "77a92e80ac3347cf"
            ]
        ]
    },
    {
        "id": "dc33e0934e4fcc37",
        "type": "link out",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Maj_Conf_Overlay_Out",
        "mode": "return",
        "links": [],
        "x": 645,
        "y": 460,
        "wires": []
    },
    {
        "id": "851225d6382973bc",
        "type": "link call",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Config",
        "links": [
            "f7798d34c5497d69"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1150,
        "y": 480,
        "wires": [
            [
                "28d2f5fee338284f"
            ]
        ]
    },
    {
        "id": "a0cd10cfc650656e",
        "type": "link out",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Bascule_Overlay",
        "mode": "link",
        "links": [
            "1a21dab6bededd94"
        ],
        "x": 1285,
        "y": 600,
        "wires": []
    },
    {
        "id": "1a21dab6bededd94",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Confirmation_Bascule_Overlay",
        "links": [
            "a0cd10cfc650656e"
        ],
        "x": 75,
        "y": 660,
        "wires": [
            [
                "f99f65ecd51b0674"
            ]
        ]
    },
    {
        "id": "50707c177d932162",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Oui",
        "cancel": "Annuler l'action",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Confirmation",
        "x": 350,
        "y": 660,
        "wires": [
            [
                "9378fba89f3bbbe7"
            ]
        ]
    },
    {
        "id": "9378fba89f3bbbe7",
        "type": "switch",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Choix",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Oui",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 660,
        "wires": [
            [
                "b18be167e2df3715"
            ],
            [
                "0f81b8053dae08d2"
            ]
        ]
    },
    {
        "id": "473cf66c4f3ba1ec",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Memo_now",
        "rules": [
            {
                "t": "set",
                "p": "Overlay_Now",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 580,
        "wires": [
            [
                "1935b7ba37d53883"
            ]
        ]
    },
    {
        "id": "b18be167e2df3715",
        "type": "change",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Annulation",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Overlay_Now",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 640,
        "wires": [
            [
                "6bd3a8347ef136ce"
            ]
        ]
    },
    {
        "id": "745cd382c136fa23",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "ecc3d44747b5a6e4",
        "name": "link in 1",
        "links": [
            "0f81b8053dae08d2"
        ],
        "x": 655,
        "y": 860,
        "wires": [
            [
                "52060a56fc94b130",
                "eeb2b765754f01b8"
            ]
        ]
    },
    {
        "id": "0f81b8053dae08d2",
        "type": "link out",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Redemarrage_Application_Overlay",
        "mode": "link",
        "links": [
            "745cd382c136fa23"
        ],
        "x": 615,
        "y": 680,
        "wires": []
    },
    {
        "id": "bc5a4ea7360d3fb0",
        "type": "link in",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Maj_Etat_Overlay_In",
        "links": [],
        "x": 65,
        "y": 540,
        "wires": [
            [
                "dcffbb1111cf47d3"
            ]
        ]
    },
    {
        "id": "1935b7ba37d53883",
        "type": "link out",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Maj_Etat_Overlay_Out",
        "mode": "return",
        "links": [],
        "x": 645,
        "y": 580,
        "wires": []
    },
    {
        "id": "28d2f5fee338284f",
        "type": "link call",
        "z": "f99f61d176d88850",
        "g": "55bdfefc3ec401d1",
        "name": "Etat",
        "links": [
            "bc5a4ea7360d3fb0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "69617daa390db277"
            ]
        ]
    },
    {
        "id": "dbabb5e702dc4941",
        "type": "ui_button",
        "z": "f99f61d176d88850",
        "name": "",
        "group": "2af2e23a3cac9b4d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sauvegarde USB",
        "tooltip": "",
        "color": "WHITE",
        "bgcolor": "BLUE",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 1360,
        "wires": [
            [
                "eca8a48f8e9ec8d1"
            ]
        ]
    },
    {
        "id": "1e70446861b72795",
        "type": "change",
        "z": "f99f61d176d88850",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Préparation à la sauvegarde",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Veuillez connecter le support de sauvegarde sur un des ports USB, assurez vous qu'il n'y ai pas d'autre support au quel cas leurs données seront effacées !",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1380,
        "wires": [
            [
                "f6d01392433f96a3"
            ]
        ]
    },
    {
        "id": "f6d01392433f96a3",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Continuer",
        "cancel": "Abandonner",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Confirmation",
        "x": 930,
        "y": 1380,
        "wires": [
            [
                "91c6cb4a6150d065"
            ]
        ]
    },
    {
        "id": "91c6cb4a6150d065",
        "type": "switch",
        "z": "f99f61d176d88850",
        "name": "Choix",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continuer",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 1380,
        "wires": [
            [
                "6ce113d125a338e9"
            ],
            []
        ]
    },
    {
        "id": "6ce113d125a338e9",
        "type": "exec",
        "z": "f99f61d176d88850",
        "command": "sudo rpi-clone -u sda",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 280,
        "y": 1460,
        "wires": [
            [
                "45d357f3962dc5ea"
            ],
            [],
            []
        ]
    },
    {
        "id": "ddaad0ad579a37cf",
        "type": "change",
        "z": "f99f61d176d88850",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Persistance des données désactivée",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Une sauvegarde ne peut être réaslisée seulement si l'Overlay FS est désactivé",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1340,
        "wires": [
            [
                "bf6081453272a9a9"
            ]
        ]
    },
    {
        "id": "eca8a48f8e9ec8d1",
        "type": "link call",
        "z": "f99f61d176d88850",
        "name": "",
        "links": [
            "bc5a4ea7360d3fb0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 380,
        "y": 1360,
        "wires": [
            [
                "177144c83549d01d"
            ]
        ]
    },
    {
        "id": "177144c83549d01d",
        "type": "switch",
        "z": "f99f61d176d88850",
        "name": "Compare",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 1360,
        "wires": [
            [
                "ddaad0ad579a37cf"
            ],
            [
                "1e70446861b72795"
            ]
        ]
    },
    {
        "id": "bf6081453272a9a9",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "j'ai compris",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "ConfirmationOverlay",
        "x": 960,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "6ae9595f6861b96e",
        "type": "ui_template",
        "z": "f99f61d176d88850",
        "group": "2af2e23a3cac9b4d",
        "name": "",
        "order": 6,
        "width": 6,
        "height": 5,
        "format": "<div id=\"debugMessages\" style=\"height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 5px;\">\n    <span ng-bind-html=\"msg.payload\"></span>\n</div>\n\n<script>\n    // Observer les changements pour déclencher le défilement\n    (function() {\n        var elem = document.getElementById('debugMessages');\n        var observer = new MutationObserver(() => {\n            if (elem) {\n                setTimeout(() => { elem.scrollTop = elem.scrollHeight; }, 100);\n            }\n        });\n\n        observer.observe(elem, { childList: true, subtree: true });\n    })();\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "45d357f3962dc5ea",
        "type": "function",
        "z": "f99f61d176d88850",
        "name": "Tampon de message",
        "func": "// Initialiser le tableau de stockage s'il n'existe pas encore\nvar buffer = context.get(\"buffer\") || [];\n\n// Ajouter le nouveau message au tampon\nbuffer.push(msg.payload);\n\n// Garder seulement les 50 derniers messages\nif (buffer.length > 50) {\n    buffer.shift();\n}\n\n// Sauvegarder le tampon dans le contexte\ncontext.set(\"buffer\", buffer);\n\n// Ajoute un saut de ligne HTML pour un affichage correct\nmsg.payload = buffer.join(\"<br>\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1460,
        "wires": [
            [
                "6ae9595f6861b96e"
            ]
        ]
    },
    {
        "id": "1fa5cf3caa274b6d",
        "type": "complete",
        "z": "f99f61d176d88850",
        "name": "",
        "scope": [
            "6ce113d125a338e9"
        ],
        "uncaught": false,
        "x": 140,
        "y": 1520,
        "wires": [
            [
                "044c26a64ef9a625"
            ]
        ]
    },
    {
        "id": "044c26a64ef9a625",
        "type": "change",
        "z": "f99f61d176d88850",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sauvegarde terminée",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "La sauvegarde est achevée, vous pouvez retirer le support de sauvegarde",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1520,
        "wires": [
            [
                "51ef47107bcb28e5"
            ]
        ]
    },
    {
        "id": "51ef47107bcb28e5",
        "type": "ui_toast",
        "z": "f99f61d176d88850",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Continuer",
        "cancel": "Abandonner",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Confirmation",
        "x": 470,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "bf529392d7957bf4",
        "type": "file in",
        "z": "b7fb87140232fe9d",
        "name": "Badges.csv",
        "filename": "/home/pi/Documents/ControleAcces/Badges.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 190,
        "y": 40,
        "wires": [
            [
                "f1b989b616a3c2b8"
            ]
        ]
    },
    {
        "id": "d2ce0b8ca3f408a5",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "name": "Recup_Badges_In",
        "links": [],
        "x": 35,
        "y": 40,
        "wires": [
            [
                "e9e0591d54fedaed",
                "bf529392d7957bf4"
            ]
        ]
    },
    {
        "id": "parse-csv",
        "type": "csv",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Parse CSV",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "obj",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "prepare-badge-list"
            ]
        ]
    },
    {
        "id": "prepare-badge-list",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Prepare Badge List",
        "func": "msg.payload = msg.payload.map(badge => ({\n    uid: badge.UID,\n    firstname: badge.FirstName,\n    lastname: badge.LastName,\n    group: badge.Group,\n    active: badge.Active === 'true'\n}));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "ui-table"
            ]
        ]
    },
    {
        "id": "add-badge",
        "type": "ui_form",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form Badge",
        "label": "Edition d'un badge",
        "group": "fb8ef8df1ea1ad74",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Code",
                "value": "uid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Badge activé",
                "value": "active",
                "type": "switch",
                "required": true,
                "rows": null
            },
            {
                "label": "Type d'accès",
                "value": "group",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Prénom",
                "value": "firstname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Nom",
                "value": "lastname",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "uid": "",
            "active": false,
            "group": "",
            "firstname": "",
            "lastname": ""
        },
        "payload": "",
        "submit": "Gérer le badge",
        "cancel": "",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 950,
        "y": 220,
        "wires": [
            [
                "5195e03d72347812",
                "c0ed11991259f947"
            ]
        ]
    },
    {
        "id": "update-csv",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Update CSV",
        "func": "// Supposons que le contenu du fichier CSV est déjà chargé dans msg.payload\nlet csvContent = msg.payload; // Contenu du fichier CSV\nlet csvLines = csvContent.split('\\n'); // Diviser par ligne\n\nconst objectToCSVLine = (obj) => {\n    return `${obj.uid},${obj.firstname},${obj.lastname},${obj.group},${obj.active}`;\n};\n\nlet originalCSVLine = objectToCSVLine(flow.get('form_data_original'));\nlet newCSVLine = objectToCSVLine(flow.get('form_data'));\n\nlet updatedCSVLines = csvLines.map(line => {\n    return line === originalCSVLine ? newCSVLine : line; // Remplacer la ligne correspondante\n});\n\nlet updatedCSVContent = updatedCSVLines.join('\\n'); // Combiner les lignes en une seule chaîne\nmsg.payload = updatedCSVContent; // Mettre à jour le message pour écrire dans le fichier\n\nreturn msg; // Cette sortie sera envoyée à un noeud file out\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 620,
        "wires": [
            [
                "write-updated-csv"
            ]
        ]
    },
    {
        "id": "write-updated-csv",
        "type": "file",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Write Updated CSV",
        "filename": "/home/pi/Documents/ControleAcces/Badges.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 770,
        "y": 660,
        "wires": [
            [
                "6c65b544c9dba5ad"
            ]
        ]
    },
    {
        "id": "delete-from-csv",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Delete From CSV",
        "func": "// Supposons que le contenu du fichier CSV est déjà chargé dans msg.payload\nlet csvContent = msg.payload; // Contenu du fichier CSV\nlet csvLines = csvContent.split('\\n'); // Diviser par ligne\n\n// Convertir form_data_original en chaîne CSV\nconst objectToCSVLine = (obj) => {\n    return `${obj.uid},${obj.firstname},${obj.lastname},${obj.group},${obj.active}`;\n};\n\nlet originalCSVLine = objectToCSVLine(flow.get('form_data_original'));\n\n// Filtrer le contenu CSV pour supprimer la ligne correspondante\nlet updatedCSVLines = csvLines.filter(line => line !== originalCSVLine); // Garder toutes les lignes sauf celle à supprimer\n\n// Combiner les lignes restantes en une seule chaîne\nlet updatedCSVContent = updatedCSVLines.join('\\n'); // Combiner les lignes restantes\nmsg.payload = updatedCSVContent; // Mettre à jour le message pour écrire dans le fichier\n\nreturn msg; // Cette sortie sera envoyée à un noeud file out\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 680,
        "wires": [
            [
                "write-updated-csv"
            ]
        ]
    },
    {
        "id": "ui-table",
        "type": "ui_table",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "group": "59fa5f21b1f59787",
        "name": "Liste des badges",
        "order": 1,
        "width": "11",
        "height": "5",
        "columns": [
            {
                "field": "active",
                "title": "Activé",
                "width": "15px",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "uid",
                "title": "Code",
                "width": "20px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "group",
                "title": "Type accès",
                "width": "15px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastname",
                "title": "Nom",
                "width": "35%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "firstname",
                "title": "Prénom",
                "width": "35%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "add-badge",
                "ca0494bb7ee27c7b"
            ]
        ]
    },
    {
        "id": "0713f52a4738adcf",
        "type": "ui_ui_control",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "d70e0a76ad116354",
                "a29b7c7115c54d1d"
            ]
        ]
    },
    {
        "id": "5195e03d72347812",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Stocker Données",
        "func": "flow.set('form_data', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "430b8d717d649def",
        "type": "ui_ui-button",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "action": "action",
        "actionType": "msg",
        "name": "Ajouter",
        "group": "fb8ef8df1ea1ad74",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Ajouter",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "icon": "add",
        "x": 1080,
        "y": 340,
        "wires": [
            [
                "a8b8abe0dbb89d01"
            ]
        ]
    },
    {
        "id": "0167bafd27ea1a58",
        "type": "ui_ui-button",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "action": "action",
        "actionType": "msg",
        "name": "Modifier",
        "group": "fb8ef8df1ea1ad74",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Modifier",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "x": 1080,
        "y": 400,
        "wires": [
            [
                "8315cb0b37bf2360"
            ]
        ]
    },
    {
        "id": "8319687c46b92b91",
        "type": "ui_ui-button",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "action": "action",
        "actionType": "msg",
        "name": "Supprimer",
        "group": "fb8ef8df1ea1ad74",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Supprimer",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "delete",
        "x": 1190,
        "y": 460,
        "wires": [
            [
                "3223507d3cfa6ef0"
            ]
        ]
    },
    {
        "id": "d70e0a76ad116354",
        "type": "change",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Cacher",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "hide",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "430b8d717d649def",
                "8319687c46b92b91",
                "0167bafd27ea1a58"
            ]
        ]
    },
    {
        "id": "982e71bcc423b51e",
        "type": "csv",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "73f87137ca42f812"
            ]
        ]
    },
    {
        "id": "73f87137ca42f812",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Recherche",
        "func": "let scannedUID = flow.get(\"form_data.uid\");\n\nnode.warn(scannedUID);\n\n// Table des badges provenant du CSV\nlet badges = msg.payload;\n\n// Rechercher le badge correspondant à l'UID scanné\nlet foundBadge = badges.find(badge => badge.UID == scannedUID);\n\nif (foundBadge) {\n    // Badge trouvé, renvoyer les informations\n    msg.payload = {\n        trouve: true,\n        message: \"Badge trouvé\",\n        badge: foundBadge\n    };\n} else {\n    // Badge non trouvé\n    msg.payload = {\n        trouve: false,\n        UID: scannedUID,\n        message: \"Badge non trouvé\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 420,
        "wires": [
            [
                "de1e94ac57e14e9b",
                "12daa1d853407168"
            ]
        ]
    },
    {
        "id": "c0ed11991259f947",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Badge_Submit",
        "mode": "link",
        "links": [
            "f8e161c6df3483ee",
            "89be4880b3ec336f"
        ],
        "x": 1075,
        "y": 260,
        "wires": []
    },
    {
        "id": "f8e161c6df3483ee",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Badge_Action",
        "links": [
            "c0ed11991259f947"
        ],
        "x": 85,
        "y": 420,
        "wires": [
            [
                "be51f9118da183d6"
            ]
        ]
    },
    {
        "id": "de1e94ac57e14e9b",
        "type": "change",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Afficher",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "show",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 420,
        "wires": [
            [
                "5b3a2cbf42ca0f61"
            ]
        ]
    },
    {
        "id": "5b3a2cbf42ca0f61",
        "type": "switch",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "",
        "property": "payload.trouve",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 420,
        "wires": [
            [
                "430b8d717d649def"
            ],
            [
                "0167bafd27ea1a58",
                "cdc669b609c0032f"
            ]
        ]
    },
    {
        "id": "89be4880b3ec336f",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Badge_Reset",
        "links": [
            "07cbe2e7971d840e",
            "6c65b544c9dba5ad",
            "c0ed11991259f947"
        ],
        "x": 745,
        "y": 340,
        "wires": [
            [
                "d70e0a76ad116354"
            ]
        ]
    },
    {
        "id": "a8b8abe0dbb89d01",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Badge_Ajouter",
        "mode": "link",
        "links": [
            "cbebc005f2e85a7d"
        ],
        "x": 1185,
        "y": 340,
        "wires": []
    },
    {
        "id": "8315cb0b37bf2360",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Badge_Modifier",
        "mode": "link",
        "links": [
            "c9a6d29df5ef2a8b"
        ],
        "x": 1185,
        "y": 400,
        "wires": []
    },
    {
        "id": "3223507d3cfa6ef0",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Badge_Supprimer",
        "mode": "link",
        "links": [
            "5201f1bc8e4e41e5",
            "0dd4a1227a3644e8"
        ],
        "x": 1305,
        "y": 460,
        "wires": []
    },
    {
        "id": "b4193616c42bd034",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Format CSV",
        "func": "let csvContent = msg.payload; // Contenu du fichier CSV chargé\nlet csvLines = csvContent.split('\\n'); // Diviser par ligne\nlet notif = \"\";\n\nconst form_data = flow.get('form_data');  // La nouvelle ligne que tu souhaites ajouter\n\n// Fonction pour convertir une ligne CSV en objet\nconst csvLineToObject = (line) => {\n    let [uid, firstname, lastname, group, active] = line.split(',');\n    return { uid, firstname, lastname, group, active };\n};\n\n// Variable pour indiquer s'il y a un doublon\nlet duplicateFound = false;\n\n// Parcourir les lignes du CSV pour vérifier les doublons\nfor (let i = 0; i < csvLines.length; i++) {\n    let existingEntry = csvLineToObject(csvLines[i]);\n\n    // Vérifier si un couple nom-prénom ou un uid est déjà présent\n    if (existingEntry.firstname === form_data.firstname && existingEntry.lastname === form_data.lastname) {\n        duplicateFound = true;\n        notif = \"Doublon detecté pour nom et prénom.\"\n        break;  // Sortir si un doublon est trouvé\n    }\n\n    if (existingEntry.uid === form_data.uid) {\n        duplicateFound = true;\n        notif = \"Doublon detecté pour UID.\"        \n        break;  // Sortir si un doublon est trouvé\n    }\n}\n\n// Si aucun doublon n'est trouvé, ajouter la nouvelle ligne\nif (!duplicateFound) {\n    // Concatène les valeurs de l'objet en une ligne CSV\n    // Tu peux ajuster l'ordre et le délimiteur en fonction de tes besoins.\n    let csvLine = `${form_data.uid},${form_data.firstname},${form_data.lastname},${form_data.group},${form_data.active}`;\n\n    // Écrire cette ligne dans msg.payload pour l'enregistrer dans un fichier\n    msg.payload = csvLine + \"\\n\";  // Ajoute un retour à la ligne à la fin\n\n} else {\n    node.warn(notif);\n    msg.payload = notif\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "9926e8fc24a9d1f3"
            ]
        ]
    },
    {
        "id": "c18097db6ea8c49a",
        "type": "file",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Write to CSV",
        "filename": "/home/pi/Documents/ControleAcces/Badges.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 620,
        "wires": [
            [
                "6c65b544c9dba5ad"
            ]
        ]
    },
    {
        "id": "cbebc005f2e85a7d",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Ajout_Badge",
        "links": [
            "a8b8abe0dbb89d01"
        ],
        "x": 65,
        "y": 560,
        "wires": [
            [
                "a306b64fd90323a8"
            ]
        ]
    },
    {
        "id": "12daa1d853407168",
        "type": "change",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Cacher",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "hide",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 380,
        "wires": [
            [
                "e4a7312f36a25dd0"
            ]
        ]
    },
    {
        "id": "e4a7312f36a25dd0",
        "type": "switch",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "",
        "property": "payload.trouve",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 380,
        "wires": [
            [
                "430b8d717d649def"
            ],
            [
                "0167bafd27ea1a58",
                "8319687c46b92b91"
            ]
        ]
    },
    {
        "id": "c9a6d29df5ef2a8b",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Modifier_Badge",
        "links": [
            "8315cb0b37bf2360"
        ],
        "x": 65,
        "y": 620,
        "wires": [
            [
                "48fe8ebc4af5cd6b"
            ]
        ]
    },
    {
        "id": "ca0494bb7ee27c7b",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Stocker Données",
        "func": "flow.set('form_data_original', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            [
                "07cbe2e7971d840e"
            ]
        ]
    },
    {
        "id": "5201f1bc8e4e41e5",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Supprimer_Badge",
        "links": [
            "3223507d3cfa6ef0"
        ],
        "x": 65,
        "y": 680,
        "wires": [
            [
                "e81743050a9f376b"
            ]
        ]
    },
    {
        "id": "be51f9118da183d6",
        "type": "link call",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "",
        "links": [
            "d2ce0b8ca3f408a5"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "982e71bcc423b51e"
            ]
        ]
    },
    {
        "id": "48fe8ebc4af5cd6b",
        "type": "link call",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "",
        "links": [
            "d2ce0b8ca3f408a5"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "update-csv"
            ]
        ]
    },
    {
        "id": "e81743050a9f376b",
        "type": "link call",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "",
        "links": [
            "d2ce0b8ca3f408a5"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "delete-from-csv"
            ]
        ]
    },
    {
        "id": "1f52d09d7dfc537a",
        "type": "comment",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Gestion de l'affichage des boutons (ajout / modification / suppression)",
        "info": "",
        "x": 650,
        "y": 460,
        "wires": []
    },
    {
        "id": "e3c2daa8b6415d3c",
        "type": "comment",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Affichage de la liste des badges dans un tableau",
        "info": "",
        "x": 660,
        "y": 180,
        "wires": []
    },
    {
        "id": "f1b989b616a3c2b8",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "name": "Recup_Badges_Out",
        "mode": "return",
        "links": [],
        "x": 315,
        "y": 40,
        "wires": []
    },
    {
        "id": "a29b7c7115c54d1d",
        "type": "link call",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "",
        "links": [
            "d2ce0b8ca3f408a5"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 250,
        "y": 300,
        "wires": [
            [
                "parse-csv"
            ]
        ]
    },
    {
        "id": "6c65b544c9dba5ad",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Fichier_Badge_Modifié",
        "mode": "link",
        "links": [
            "89be4880b3ec336f",
            "beaa458f9661cf23"
        ],
        "x": 905,
        "y": 640,
        "wires": []
    },
    {
        "id": "beaa458f9661cf23",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Table_Update",
        "links": [
            "6c65b544c9dba5ad"
        ],
        "x": 105,
        "y": 300,
        "wires": [
            [
                "a29b7c7115c54d1d"
            ]
        ]
    },
    {
        "id": "af9e52185c4c958b",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Read_Tag",
        "links": [
            "92e181a1ce7fe4e8"
        ],
        "x": 625,
        "y": 260,
        "wires": [
            [
                "428593e904c3f9e3"
            ]
        ]
    },
    {
        "id": "0dd4a1227a3644e8",
        "type": "link in",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Form_Memo_Suppr",
        "links": [
            "3223507d3cfa6ef0"
        ],
        "x": 625,
        "y": 300,
        "wires": [
            [
                "01bd06a552790404"
            ]
        ]
    },
    {
        "id": "01bd06a552790404",
        "type": "change",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Ancienne valeur",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "form_data",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 300,
        "wires": [
            [
                "add-badge"
            ]
        ]
    },
    {
        "id": "428593e904c3f9e3",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "uid Lu",
        "func": "var uid = msg.payload.uid;\n\nmsg.payload = {\n    uid : uid\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "add-badge"
            ]
        ]
    },
    {
        "id": "cdc669b609c0032f",
        "type": "function",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Pas modifié",
        "func": "let _old = flow.get('form_data_original');\nlet _new = flow.get('form_data');\n\nvar equals = _old.uid === _new.uid\n    && _old.firstname === _new.firstname\n    && _old.lastname === _new.lastname\n    && _old.group === _new.group\n    && _old.active === _new.active\n\nif (equals === true) \n{\n    msg.action = \"show\";\n} else {\n    msg.action = \"hide\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "8319687c46b92b91"
            ]
        ]
    },
    {
        "id": "07cbe2e7971d840e",
        "type": "link out",
        "z": "b7fb87140232fe9d",
        "g": "6fb40bcfcadc177b",
        "name": "Table_Selection",
        "mode": "link",
        "links": [
            "89be4880b3ec336f"
        ],
        "x": 1095,
        "y": 180,
        "wires": []
    },
    {
        "id": "a306b64fd90323a8",
        "type": "link call",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "",
        "links": [
            "d2ce0b8ca3f408a5"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "b4193616c42bd034"
            ]
        ]
    },
    {
        "id": "3031944d6dea631e",
        "type": "ui_toast",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 850,
        "y": 560,
        "wires": []
    },
    {
        "id": "9926e8fc24a9d1f3",
        "type": "switch",
        "z": "b7fb87140232fe9d",
        "g": "5444c772b7bef63c",
        "name": "Anti. doublons",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Doublon detecté",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 560,
        "wires": [
            [
                "3031944d6dea631e",
                "6c65b544c9dba5ad"
            ],
            [
                "c18097db6ea8c49a"
            ]
        ]
    },
    {
        "id": "0f4dd6a43470ed40",
        "type": "link call",
        "z": "b7fb87140232fe9d",
        "name": "",
        "links": [
            "bc5a4ea7360d3fb0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "3108f41c3e0bb8ab"
            ]
        ]
    },
    {
        "id": "cef450aafd293de7",
        "type": "change",
        "z": "b7fb87140232fe9d",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Persistance des données désactivée",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Attention :  La persistance des données n'est pas activée, les modifications apportées ne seront pas sauvegardées, veuillez désactiver l'overlay FS pour conserver les modifications",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 80,
        "wires": [
            [
                "1f29d63a567c6bfb"
            ]
        ]
    },
    {
        "id": "1f29d63a567c6bfb",
        "type": "ui_toast",
        "z": "b7fb87140232fe9d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "j'ai compris",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "ConfirmationOverlay",
        "x": 960,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3108f41c3e0bb8ab",
        "type": "switch",
        "z": "b7fb87140232fe9d",
        "name": "Compare",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 80,
        "wires": [
            [
                "cef450aafd293de7"
            ],
            []
        ]
    },
    {
        "id": "e9e0591d54fedaed",
        "type": "delay",
        "z": "b7fb87140232fe9d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 80,
        "wires": [
            [
                "0f4dd6a43470ed40"
            ]
        ]
    },
    {
        "id": "78bc32fd489261d1",
        "type": "mqtt in",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "",
        "topic": "CtrlAccess/state/Life",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "631cc1e4eb5c5735",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "c2a5d3ed4375ca2e",
                "c9c3485fced0181e",
                "b6730c9cd280693e"
            ]
        ]
    },
    {
        "id": "d8b59f3350b520fa",
        "type": "mqtt in",
        "z": "591abc7ecc8a82dd",
        "name": "",
        "topic": "CtrlAccess/state/Online",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "631cc1e4eb5c5735",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 440,
        "wires": [
            [
                "d2273536d7b960a9"
            ]
        ]
    },
    {
        "id": "d2273536d7b960a9",
        "type": "link out",
        "z": "591abc7ecc8a82dd",
        "name": "MQTT_Online",
        "mode": "link",
        "links": [
            "413b7f85a50b09f0"
        ],
        "x": 285,
        "y": 440,
        "wires": []
    },
    {
        "id": "c9c3485fced0181e",
        "type": "mqtt out",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "",
        "topic": "CtrlAccess/Life",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "631cc1e4eb5c5735",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "ac8af869b3242cbd",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Mémo Old",
        "rules": [
            {
                "t": "set",
                "p": "LifeOld",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b6730c9cd280693e",
        "type": "switch",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Différente",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "LifeOld",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 180,
        "wires": [
            [
                "ac8af869b3242cbd",
                "1b3a505c1fb09b5a"
            ]
        ]
    },
    {
        "id": "1b3a505c1fb09b5a",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Tempo RAZ",
        "rules": [
            {
                "t": "set",
                "p": "TempoComm",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c2a5d3ed4375ca2e",
        "type": "debug",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "960329839e07f6fd",
        "type": "inject",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "ft1s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "41517a322d9eb80e",
                "85b7f075344482af"
            ]
        ]
    },
    {
        "id": "41517a322d9eb80e",
        "type": "function",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Gestion tempo",
        "func": "let tempo = flow.get(\"TempoComm\");\n\nif (tempo < 10)\n{\n    tempo = tempo + 1;\n    flow.set(\"TempoComm\", tempo);\n}\nmsg.payload = tempo;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "85b7f075344482af",
        "type": "switch",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Etat communication",
        "property": "TempoComm",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lt",
                "v": "10",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "10",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "413eeeea223db926"
            ],
            [
                "af2ce02634a47f83"
            ]
        ]
    },
    {
        "id": "af2ce02634a47f83",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "KO",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "422152293a8cc4ae"
            ]
        ]
    },
    {
        "id": "413eeeea223db926",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 280,
        "wires": [
            [
                "422152293a8cc4ae"
            ]
        ]
    },
    {
        "id": "3487b4a67424ab63",
        "type": "debug",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Défaut de commnunication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "$globalContext(\"DefCom\")",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 240,
        "wires": []
    },
    {
        "id": "7e39c6db9fc3e5d7",
        "type": "inject",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Firstscan",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "b6730c9cd280693e"
            ]
        ]
    },
    {
        "id": "70e975d29c6d573f",
        "type": "link out",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "DefComm",
        "mode": "link",
        "links": [
            "bdba2b4f959a87a0"
        ],
        "x": 875,
        "y": 280,
        "wires": []
    },
    {
        "id": "422152293a8cc4ae",
        "type": "switch",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Changement de valeur",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "DefCom",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "a48aabe134c6753a"
            ]
        ]
    },
    {
        "id": "0d1b2a142d8a2c92",
        "type": "ui_toast",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "position": "top right",
        "displayTime": "5",
        "highlight": "Red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1130,
        "y": 160,
        "wires": []
    },
    {
        "id": "4ae815b9e2048893",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Communication MQTT rétablie",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 200,
        "wires": [
            [
                "456387f7ddb14772"
            ]
        ]
    },
    {
        "id": "7dd13654c169f94c",
        "type": "switch",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Défaut",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 180,
        "wires": [
            [
                "96e1a885a08e2b85"
            ],
            [
                "4ae815b9e2048893"
            ]
        ]
    },
    {
        "id": "96e1a885a08e2b85",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Défaut de communication MQTT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 160,
        "wires": [
            [
                "0d1b2a142d8a2c92"
            ]
        ]
    },
    {
        "id": "456387f7ddb14772",
        "type": "ui_toast",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "position": "top right",
        "displayTime": "2",
        "highlight": "Green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "a48aabe134c6753a",
        "type": "change",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Memo",
        "rules": [
            {
                "t": "set",
                "p": "DefCom",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "7dd13654c169f94c",
                "3487b4a67424ab63",
                "70e975d29c6d573f"
            ]
        ]
    },
    {
        "id": "8b66295461714e80",
        "type": "comment",
        "z": "591abc7ecc8a82dd",
        "g": "75a9a7cf037a474d",
        "name": "Aide",
        "info": "# Documentation du Flux : Gestion de la Communication MQTT avec Bit de Vie\n\nCe flux gère la communication MQTT en surveillant l'état de vie (`Life Bit`) et en détectant les éventuels défauts de communication. Voici une explication des principaux nœuds et de leur rôle.\n\n---\n\n## Nœuds Principaux\n\n### 1. **[Entrée MQTT : CtrlAccess/state/Life]**\n- **Type** : `mqtt in`\n- **Description** : Ce nœud écoute les messages MQTT publiés sur le topic `CtrlAccess/state/Life` pour détecter les bits de vie (indicateurs que la communication est active).  \n- **Connecté à** : \n  - Le nœud de debug (`debug 3`) pour observer les messages reçus.\n  - Le nœud de comparaison (`Différente`) pour analyser si l'état reçu est nouveau.\n  - Le nœud de sortie MQTT (`CtrlAccess/Life`) pour réémettre l'état.\n\n---\n\n### 2. **[Sortie MQTT : CtrlAccess/Life]**\n- **Type** : `mqtt out`\n- **Description** : Ce nœud publie l'état `Life` sur le topic `CtrlAccess/Life` pour le renvoyer à la source qui se charge d'inverser ce quelle reçoi via ce topic.\n\n---\n\n### 3. **[Mémo Old : Sauvegarde de l'état précédent]**\n- **Type** : `change`\n- **Description** : Ce nœud enregistre l'état précédent du bit de vie (`LifeOld`) dans le contexte `flow` pour comparer les nouveaux états.  \n- **Connecté à** : Le nœud de comparaison (`Différente`).\n\n---\n\n### 4. **[Différente : Comparaison d'états]**\n- **Type** : `switch`\n- **Description** : Ce nœud compare l'état actuel reçu (`payload`) avec l'état précédent (`LifeOld`).  \n- **Règle** : Si les deux états sont différents, le flux continue vers :\n  - **Mémo Old** pour mettre à jour l'état sauvegardé.\n  - **Tempo RAZ** pour réinitialiser le compteur de temporisation.\n\n---\n\n### 5. **[Tempo RAZ : Réinitialisation de la temporisation]**\n- **Type** : `change`\n- **Description** : Ce nœud remet la temporisation (`TempoComm`) à 0 pour indiquer qu'un bit de vie a été détecté.  \n\n---\n\n### 6. **[Gestion tempo : Gestion de la temporisation]**\n- **Type** : `function`\n- **Description** : Ce nœud incrémente périodiquement la temporisation (`TempoComm`) si aucune donnée nouvelle n'est reçue.  \n- **Logiciel** : Si la temporisation atteint une valeur limite (10 ici), cela indique un défaut de communication.\n\n---\n\n### 7. **[État communication : Vérification de la temporisation]**\n- **Type** : `switch`\n- **Description** : Ce nœud vérifie si la temporisation est en dessous ou au-dessus de la limite (10).  \n- **Règles** : \n  - Si `< 10` : La communication est considérée comme fonctionnelle.\n  - Si `>= 10` : Un défaut de communication est déclaré.\n\n---\n\n### 8. **[Défaut : Gestion des défauts de communication]**\n- **Type** : `switch`\n- **Description** : Ce nœud divise le flux selon l'état de la communication :  \n  - **Défaut** : Active une notification d'erreur et met à jour le contexte global (`DefCom`).  \n  - **OK** : Informe que la communication est rétablie.\n\n---\n\n### 9. **[Notification et Journalisation]**\n- **Type** : `ui_toast` et `debug`\n- **Description** : \n  - Une notification visuelle est affichée en cas de défaut ou de rétablissement de la communication.\n  - Les messages d'état sont également affichés dans la console debug pour faciliter le diagnostic.\n\n---\n\n## Scénarios\n- **Bit de vie reçu** : Le flux réinitialise la temporisation et enregistre l'état reçu. La communication est considérée comme fonctionnelle.\n- **Aucun bit de vie reçu pendant un certain temps** : Le flux détecte un défaut, génère une alerte et met à jour l'état global.\n- **Communication rétablie après un défaut** : Une notification de rétablissement est affichée, et l'état global est remis à jour.\n\n---\n\n## Points à noter\n- **Temporisation** : Le système repose sur une temporisation incrémentale pour surveiller les défauts de communication. Cela permet de tolérer des interruptions momentanées.  \n- **Notifications** : Les notifications aident à surveiller en temps réel l'état du système, sans intervention constante.  \n",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "form_piscine",
        "type": "ui_form",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Accès piscine",
        "label": "Plage d'accès",
        "group": "8d754f839da525fc",
        "order": 1,
        "width": "",
        "height": "",
        "options": [
            {
                "label": "Date début",
                "value": "date_debut",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date fin",
                "value": "date_fin",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Heure début",
                "value": "heure_debut",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Heure fin",
                "value": "heure_fin",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "date_debut": "",
            "date_fin": "",
            "heure_debut": "",
            "heure_fin": ""
        },
        "submit": "Appliquer",
        "cancel": "",
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "d04a035bf1a5d153"
            ]
        ]
    },
    {
        "id": "form_ouverture",
        "type": "ui_form",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Temps ouverture",
        "label": "Temps d'ouverture",
        "group": "8d754f839da525fc",
        "order": 3,
        "width": "",
        "height": "",
        "options": [
            {
                "label": "Entrée (sec)",
                "value": "entree",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Sortie (sec)",
                "value": "sortie",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "entree": "",
            "sortie": ""
        },
        "submit": "Appliquer",
        "cancel": "",
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "d04a035bf1a5d153"
            ]
        ]
    },
    {
        "id": "8c129268cf06fa26",
        "type": "ui_ui_control",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "0e9d63e074df1cc8"
            ]
        ],
        "info": "Exécute le flux lorsque la page web :\r\n -  Se charge à l'ouverture\r\n -  Est actualisée"
    },
    {
        "id": "split_keys",
        "type": "split",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "3.Diviser par Clé",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "property": "payload",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "route_keys",
                "918073b321fb1666"
            ]
        ],
        "info": "Les paramètres sont regroupés dans le JSON\r\nUn groupe est géré par un seul formulaire\r\n\r\npour relier le bon groupe de paramètres à leur formulaire respectif,\r\non doit récupérer la clé regroupant les paramètres.\r\n\r\nCette clé est stockée dans le topic du message"
    },
    {
        "id": "route_keys",
        "type": "switch",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "4.Routage topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "acces_piscine",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "temps_ouverture",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "form_piscine"
            ],
            [
                "form_ouverture"
            ],
            []
        ],
        "info": "En fonction de la valeur du topic,\r\non affecte les données au formulaire adéquat"
    },
    {
        "id": "caa64d86486e0c34",
        "type": "debug",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "Debug ré-assemblage",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 320,
        "wires": []
    },
    {
        "id": "582a858c3f44d407",
        "type": "file in",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "2.Paramètres.json",
        "filename": "/home/pi/Documents/ControleAcces/Parametres.json",
        "filenameType": "str",
        "format": "utf8",
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "merge_dynamic_json"
            ]
        ],
        "info": "On récupère tous les paramètres actuels du fichier JSON"
    },
    {
        "id": "handle_dynamic_form",
        "type": "function",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "1.Associer la clé dynamique",
        "func": "// Vérifiez que msg.topic contient la clé cible\nif (!msg.topic) {\n    node.error(\"La clé cible (msg.topic) est manquante.\");\n    return null;\n}\n\n// Associer la clé dynamique avec les données du formulaire\nlet dynamicUpdate = {};\ndynamicUpdate[msg.topic] = msg.payload;\nmsg.dynamicUpdate = dynamicUpdate;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "582a858c3f44d407"
            ]
        ],
        "info": "Le topic est récupéré afin d'identifier quel formulaire soumet les données reçues.\r\nCes données sont mises de cotés pour plus tard au moment où on mettra à jour les paramètres."
    },
    {
        "id": "merge_dynamic_json",
        "type": "function",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "3.Fusionner JSON dynamique",
        "func": "// Charger le JSON existant\nvar existingJson = JSON.parse(msg.payload);\n\n// Fusionner dynamiquement avec les nouvelles données\nObject.assign(existingJson, msg.dynamicUpdate);\n\n// Retourner le JSON mis à jour\nmsg.payload = JSON.stringify(existingJson, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 360,
        "wires": [
            [
                "caa64d86486e0c34",
                "b0cc9c632e5568e7",
                "703d03dc2970af4b"
            ]
        ],
        "info": "Le fichier décomposé et ré-assemblé en remplaçant les section qui ont été modifiées par les données reçues du formulaire"
    },
    {
        "id": "918073b321fb1666",
        "type": "debug",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Debug Msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "d04a035bf1a5d153",
        "type": "link out",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Param_Form_Submit",
        "mode": "link",
        "links": [
            "4294cbb75e704dcd"
        ],
        "x": 1215,
        "y": 160,
        "wires": [],
        "info": "Redirection vers la validation des formumaires"
    },
    {
        "id": "3f43fdfde31db126",
        "type": "link out",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "Param_JSON_Updated",
        "mode": "link",
        "links": [
            "5dd6483293b45783",
            "51a010616a1a2b65"
        ],
        "x": 1045,
        "y": 400,
        "wires": []
    },
    {
        "id": "5dd6483293b45783",
        "type": "link in",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Param_Re-populate_Forms",
        "links": [
            "3f43fdfde31db126"
        ],
        "x": 135,
        "y": 200,
        "wires": [
            [
                "0e9d63e074df1cc8"
            ]
        ]
    },
    {
        "id": "4294cbb75e704dcd",
        "type": "link in",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "Param_Update_JSON",
        "links": [
            "d04a035bf1a5d153"
        ],
        "x": 65,
        "y": 360,
        "wires": [
            [
                "handle_dynamic_form"
            ]
        ]
    },
    {
        "id": "d8c3b3d7be81b28f",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Aide",
        "info": "## Étapes du Flux\n\n1. **Récupération des paramètres** :  \n   Le fichier contenant les paramètres est récupéré au format JSON.\n\n2. **Conversion en objet JavaScript** :  \n   Les données JSON sont transformées en objet manipulable pour le traitement.\n\n3. **Traitement des jeux de paramètres** :  \n   Chaque jeu de paramètres est traité individuellement et possède son propre formulaire :\n   - **_acces_piscine_** : Gestion des dates et heures d'ouverture des badges verts.  \n   - **_temps_ouverture_** : Gestion du temps d'ouverture pour entrer/sortir de la piscine.  \n\n4. **Pré-remplissage des formulaires** :  \n   Les formulaires sont automatiquement pré-remplis avec les valeurs actuelles récupérées en fonction du topic associé.\n\n---\n\n### Soumission des données\nLors de la soumission du formulaire, les données saisies sont récupérées et transmises pour traitement.  \nLe traitement est effectué dans la section suivante :  \n**2. Mise à jour du fichier de paramètres**\n",
        "x": 90,
        "y": 120,
        "wires": []
    },
    {
        "id": "73de6374571858aa",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "Aide",
        "info": "## Étapes du Flux\n\n1. **Récupération du topic** :  \n   Le topic est analysé pour identifier quel formulaire a soumis les données. Ces données sont temporairement stockées pour être utilisées lors de la mise à jour des paramètres.\n\n2. **Lecture des paramètres actuels** :  \n   Tous les paramètres actuels sont récupérés à partir du fichier JSON.\n\n3. **Mise à jour des sections modifiées** :  \n   Le fichier est décomposé en sections, puis réassemblé en remplaçant les sections modifiées par les nouvelles données reçues du formulaire.\n\n4. **Mise à jour du fichier** :  \n   Le fichier JSON est écrasé avec les nouvelles valeurs.\n\n---\n\n### Soumission des données\nLorsqu'un formulaire est soumis :  \n- Les données saisies sont effacées après traitement.  \n- Un signal est renvoyé pour repeupler les formulaires avec les paramètres mis à jour.  \n",
        "x": 90,
        "y": 320,
        "wires": []
    },
    {
        "id": "b0cc9c632e5568e7",
        "type": "file",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "4.Maj des paramètres",
        "filename": "/home/pi/Documents/ControleAcces/Parametres.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "d01648807342866a"
            ]
        ],
        "info": "Le fichier est écrasé avec les nouvelles valeurs."
    },
    {
        "id": "ab73f302936e1e51",
        "type": "ui_toast",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "position": "top right",
        "displayTime": "2",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1330,
        "y": 360,
        "wires": []
    },
    {
        "id": "d01648807342866a",
        "type": "change",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Paramètres mis à jour",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 360,
        "wires": [
            [
                "ab73f302936e1e51"
            ]
        ]
    },
    {
        "id": "set-system-time",
        "type": "exec",
        "z": "2bda734229a070eb",
        "d": true,
        "g": "5a391963a7287350",
        "command": "sudo date -s ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Définir heure système",
        "x": 1100,
        "y": 780,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "becf941b1a8de637",
        "type": "ui_form",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "",
        "label": "Réglage date et heure",
        "group": "2fc761fc214b7ca9",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Date",
                "value": "Date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Heure",
                "value": "Heure",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Date": "",
            "Heure": ""
        },
        "payload": "",
        "submit": "Définir",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 460,
        "y": 720,
        "wires": [
            [
                "format-date-time"
            ]
        ]
    },
    {
        "id": "format-date-time",
        "type": "function",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Concat Date/Heure",
        "func": "var date = new Date(msg.payload.Date);\nvar time = new Date(msg.payload.Heure);\n\n// Extraire la partie date\nvar year = date.getFullYear();\nvar month = (date.getMonth() + 1).toString().padStart(2, '0');\nvar day = date.getDate().toString().padStart(2, '0');\n\n// Extraire la partie heure\nvar hours = time.getHours().toString().padStart(2, '0');\nvar minutes = time.getMinutes().toString().padStart(2, '0');\nvar seconds = time.getSeconds().toString().padStart(2, '0');\n\n// Combiner en chaîne formatée\nvar formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\nmsg.payload = formattedDateTime;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 720,
        "wires": [
            [
                "fc52c7a5b42d6d93"
            ]
        ]
    },
    {
        "id": "798f8938cab8d653",
        "type": "inject",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "248e24b72cc80b9b",
                "9fb2a73cd4792475"
            ]
        ]
    },
    {
        "id": "3692e410e43961cd",
        "type": "ui_text",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "group": "de61be64d46e4941",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Date",
        "label": "",
        "format": "{{msg.payload.datetime}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 530,
        "y": 920,
        "wires": []
    },
    {
        "id": "248e24b72cc80b9b",
        "type": "moment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Format Jour",
        "topic": "",
        "input": "payload.timestamp",
        "inputType": "msg",
        "inTz": "Europe/Paris",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "add",
        "format": "dddd",
        "locale": "fr-FR",
        "output": "payload.day",
        "outputType": "msg",
        "outTz": "Europe/Paris",
        "x": 370,
        "y": 880,
        "wires": [
            [
                "080297b2478bcc19"
            ]
        ]
    },
    {
        "id": "9fb2a73cd4792475",
        "type": "moment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Format Date",
        "topic": "",
        "input": "payload.timestamp",
        "inputType": "msg",
        "inTz": "Europe/Paris",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "add",
        "format": "DD/MM/yyyy HH:mm:ss",
        "locale": "fr-FR",
        "output": "payload.datetime",
        "outputType": "msg",
        "outTz": "Europe/Paris",
        "x": 370,
        "y": 920,
        "wires": [
            [
                "3692e410e43961cd"
            ]
        ]
    },
    {
        "id": "080297b2478bcc19",
        "type": "ui_text",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "group": "de61be64d46e4941",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Jour",
        "label": "",
        "format": "{{msg.payload.day}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "4b6a23c6150c579a",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Affichage de l'heure",
        "info": "Affichage de l'heure sur la page d'accueil",
        "x": 170,
        "y": 860,
        "wires": []
    },
    {
        "id": "a6fd6480f60f1efb",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Réglage de l'heure",
        "info": "",
        "x": 470,
        "y": 760,
        "wires": []
    },
    {
        "id": "b3832d375286d59e",
        "type": "ui_ui_control",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 720,
        "wires": [
            [
                "8ad750ef08bb7665"
            ]
        ]
    },
    {
        "id": "8ad750ef08bb7665",
        "type": "function",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Formatage",
        "func": "var date = new Date();\n\n// Récupérer uniquement les heures et les minutes\nvar heures = date.getHours();\nvar minutes = date.getMinutes();\n\nif (heures < 10) {\n    heures = '0' + heures;\n}\n\n// Ajouter un 0 devant les minutes si elles sont inférieures à 10 (format HH:mm)\nif (minutes < 10) {\n    minutes = '0' + minutes;\n}\n\nmsg.payload = {\n    Date: date, // Formater la date en chaîne lisible\n    Heure: heures + \":\" + minutes + \" :00\" // Formater l'heure en HH:mm :00\n    // Attention l'espace avant les secondes est important, sinon le time picker affiche --:--\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "becf941b1a8de637"
            ]
        ]
    },
    {
        "id": "89b65951d548a3f6",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Pré-remplissage du formulaire",
        "info": "",
        "x": 180,
        "y": 760,
        "wires": []
    },
    {
        "id": "fc52c7a5b42d6d93",
        "type": "moment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Paris",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "fr-FR@euro",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Paris",
        "x": 900,
        "y": 720,
        "wires": [
            [
                "bc176d9dc4165081"
            ]
        ]
    },
    {
        "id": "bc176d9dc4165081",
        "type": "mqtt out",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "",
        "topic": "CtrlAccess/Rtc",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "631cc1e4eb5c5735",
        "x": 1120,
        "y": 720,
        "wires": []
    },
    {
        "id": "51a010616a1a2b65",
        "type": "link in",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "Param_Update_Arduino",
        "links": [
            "3f43fdfde31db126"
        ],
        "x": 395,
        "y": 520,
        "wires": [
            [
                "52aea6fbe6cdc28b"
            ]
        ]
    },
    {
        "id": "adbad85229010494",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "Aide",
        "info": "les étapes du flux sont les suivantes :\n\n 1. Le paramètres actuels sont récupéré du fichier JSON.\n 2. Le JSON est parsé en objet JavaScript.\n 3. Chaque paramètres est extrait et enoyé dans un message clé=valeur.\n",
        "x": 90,
        "y": 520,
        "wires": []
    },
    {
        "id": "c1ab756bcd256b8f",
        "type": "mqtt out",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "",
        "topic": "CtrlAccess/Param",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "631cc1e4eb5c5735",
        "x": 830,
        "y": 540,
        "wires": []
    },
    {
        "id": "104cbd5487291ad2",
        "type": "comment",
        "z": "2bda734229a070eb",
        "g": "5a391963a7287350",
        "name": "Aide",
        "info": "## Description du Flux : Réglage de la Date et de l'Heure Système\n\n### Objectif :\nCe flux permet de configurer l'heure et la date du système via un formulaire et de synchroniser ces paramètres avec un module RTC connecté à un Arduino. L'Arduino est configuré comme serveur NTP, permettant au système Raspberry Pi de récupérer l'heure à jour.\n\n---\n\n### Étapes du Flux :\n\n1. **Saisie utilisateur** :  \n   Un formulaire dans l'interface utilisateur permet à l'utilisateur de définir une date et une heure. Ces données sont envoyées au flux via un **node UI Form**.\n\n2. **Formatage des données** :  \n   Une fonction combine la date et l'heure saisies en une chaîne unique au format `AAAA-MM-JJ HH:MM:SS`.\n\n3. **Transmission MQTT** :  \n   - La date et l'heure formatées sont transmises via le protocole **MQTT** à l'Arduino.  \n   - L'Arduino met à jour le module RTC pour refléter ces nouvelles valeurs.\n   - Le module RTC possède une pile permettant de garder son heure à jour lorsque le système est hors tension.\n\n4. **Configuration du serveur NTP** :  \n   L'Arduino, configuré comme serveur NTP, fournit l'heure actuelle au Raspberry Pi lorsque ce dernier l'interroge.\n\n5. **Mise à jour et affichage** :  \n   - Le système met à jour l'heure système locale à partir des informations reçues.  \n   - L'heure actuelle est affichée dynamiquement sur la page d'accueil de l'interface utilisateur.\n\n---\n\n### Points Clés :\n- **MQTT** est utilisé pour la communication entre le Raspberry Pi et l'Arduino.  \n- L'Arduino agit comme une source de temps de référence (serveur NTP).  \n- La date et l'heure sont constamment synchronisées entre le module RTC, l'Arduino et le système.  \n\nCe flux garantit une synchronisation précise et centralisée de la date et de l'heure entre tous les composants du système.\n",
        "x": 630,
        "y": 820,
        "wires": []
    },
    {
        "id": "413b7f85a50b09f0",
        "type": "link in",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "Param_Update_Arduino_Online",
        "links": [
            "d2273536d7b960a9"
        ],
        "x": 65,
        "y": 560,
        "wires": [
            [
                "22a4d126a7b3577a"
            ]
        ]
    },
    {
        "id": "9b2bda38afb34204",
        "type": "debug",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "Debug send param",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 600,
        "wires": []
    },
    {
        "id": "52aea6fbe6cdc28b",
        "type": "function",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "Extraction Param",
        "func": "function traverse(obj, path) {\n    let messages = [];\n    for (const key in obj) {\n        const value = obj[key];\n        const newPath = path ? `${path}/${key}` : key;\n        if (typeof value === \"object\" && value !== null) {\n            // Récursion pour les objets imbriqués\n            messages = messages.concat(traverse(value, newPath));\n        } else {\n            // Ajouter chaque clé=valeur au tableau des messages\n            messages.push({ payload: `${newPath}=${value}` });\n        }\n    }\n    return messages;\n}\n\n// Récupérer le JSON dans msg.payload\nconst json = msg.payload;\n\n// Obtenir tous les messages formatés\nconst messages = traverse(json, \"\");\n\n// Envoyer les messages un par un\nmessages.forEach(message => node.send(message));\n\n// Arrêter le flux pour éviter des erreurs supplémentaires\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 560,
        "wires": [
            [
                "c1ab756bcd256b8f",
                "9b2bda38afb34204"
            ]
        ]
    },
    {
        "id": "9b3028a96953aa74",
        "type": "inject",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "22a4d126a7b3577a"
            ]
        ]
    },
    {
        "id": "0124b39cabcd3cd4",
        "type": "link in",
        "z": "2bda734229a070eb",
        "name": "Recup_Param_In",
        "links": [],
        "x": 45,
        "y": 40,
        "wires": [
            [
                "36a84b4087f3f2b7"
            ]
        ]
    },
    {
        "id": "bac5438d9cc58133",
        "type": "link out",
        "z": "2bda734229a070eb",
        "name": "Recup_Param_Out",
        "mode": "return",
        "links": [],
        "x": 465,
        "y": 40,
        "wires": []
    },
    {
        "id": "36a84b4087f3f2b7",
        "type": "file in",
        "z": "2bda734229a070eb",
        "name": "1.Paramètres.json",
        "filename": "/home/pi/Documents/ControleAcces/Parametres.json",
        "filenameType": "str",
        "format": "utf8",
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 190,
        "y": 40,
        "wires": [
            [
                "cf07924a26b03587"
            ]
        ],
        "info": "Lecture du fichier contenant les paramètres"
    },
    {
        "id": "cf07924a26b03587",
        "type": "json",
        "z": "2bda734229a070eb",
        "name": "2.Json",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 370,
        "y": 40,
        "wires": [
            [
                "bac5438d9cc58133"
            ]
        ],
        "info": "Conversion des données Json en objet javascript (objet utilisé par Node-RED)"
    },
    {
        "id": "0e9d63e074df1cc8",
        "type": "link call",
        "z": "2bda734229a070eb",
        "g": "5712cf90b1da71a0",
        "name": "Paramètres",
        "links": [
            "0124b39cabcd3cd4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "split_keys"
            ]
        ]
    },
    {
        "id": "22a4d126a7b3577a",
        "type": "link call",
        "z": "2bda734229a070eb",
        "g": "8da2d3af0c18bd9f",
        "name": "Paramètres",
        "links": [
            "0124b39cabcd3cd4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 560,
        "wires": [
            [
                "52aea6fbe6cdc28b"
            ]
        ]
    },
    {
        "id": "703d03dc2970af4b",
        "type": "json",
        "z": "2bda734229a070eb",
        "g": "653da2730ee03df8",
        "name": "2.Json",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 950,
        "y": 400,
        "wires": [
            [
                "3f43fdfde31db126"
            ]
        ],
        "info": "Conversion des données Json en objet javascript (objet utilisé par Node-RED)"
    }
]